        -:    0:Source:ThreadPool.cpp
        -:    1:#include "ThreadPool.hpp"
        -:    2:
        1:    3:ThreadPool::ThreadPool(size_t numThreads) : stop(false), activeTasks(0) {
       11:    4:    for (size_t i = 0; i < numThreads; ++i) {
       10:    5:        workers.emplace_back(&ThreadPool::workerThread, this);
        -:    6:    }
        1:    7:}
        -:    8:
        1:    9:ThreadPool::~ThreadPool() {
        -:   10:    {
        1:   11:        std::unique_lock<std::mutex> lock(mtx);
        1:   12:        stop = true;
        1:   13:    }
        1:   14:    cv.notify_all();
       11:   15:    for (std::thread& worker : workers) {
       10:   16:        worker.join();
        -:   17:    }
        1:   18:}
        -:   19:
        1:   20:void ThreadPool::enqueue(std::function<void()> task) {
        -:   21:    {
        1:   22:        std::unique_lock<std::mutex> lock(mtx);
        1:   23:        tasks.push(task);
        1:   24:        activeTasks++;
        1:   25:    }
        1:   26:    cv.notify_one();
        1:   27:}
        -:   28:
       32:   29:bool ThreadPool::hasActiveTasks() {
       32:   30:    std::unique_lock<std::mutex> lock(mtx);
       64:   31:    return !tasks.empty() || activeTasks > 0;
       32:   32:}
        -:   33:
       11:   34:void ThreadPool::workerThread() {
        -:   35:    while (true) {
       11:   36:        std::function<void()> task;
        -:   37:        {
       11:   38:            std::unique_lock<std::mutex> lock(mtx);
       33:   39:            cv.wait(lock, [this] { return stop || !tasks.empty(); });
       21:   40:            if (stop && tasks.empty()) return;
        1:   41:            task = tasks.front();
        1:   42:            tasks.pop();
       11:   43:        }
        1:   44:        task();
        1:   45:        activeTasks--;
       12:   46:    }
        -:   47:}
