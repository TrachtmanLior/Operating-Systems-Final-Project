--------------------------------------------------------------------------------
Profile data file 'callgrind_outputs/callgrind.out' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 180200597
Trigger: Program termination
Profiled target:  ./profiling (PID 801390, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,255,916,747 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
110,931,288 ( 8.83%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 68,478,101 ( 5.45%)  MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 40,811,812 ( 3.25%)  MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int)'2 [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 39,123,134 ( 3.12%)  MSTSolver.cpp:BoruvkaSolver::solve(Graph&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 29,661,255 ( 2.36%)  /usr/include/c++/11/bits/stl_uninitialized.h:void std::__relocate_object_a<Edge, Edge, std::allocator<Edge> >(Edge*, Edge*, std::allocator<Edge>&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 28,765,512 ( 2.29%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<Edge>::construct<Edge, Edge>(Edge*, Edge&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 26,999,640 ( 2.15%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 26,219,851 ( 2.09%)  /usr/include/c++/11/bits/move.h:Edge* std::__addressof<Edge>(Edge&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 25,549,881 ( 2.03%)  Graph.cpp:Graph::getEdges() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 23,999,680 ( 1.91%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge const*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > > const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 23,580,174 ( 1.88%)  /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__relocate_a_1<Edge*, Edge*, std::allocator<Edge> >(Edge*, Edge*, Edge*, std::allocator<Edge>&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 22,772,697 ( 1.81%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<Edge> >::construct<Edge, Edge>(std::allocator<Edge>&, Edge*, Edge&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 22,398,912 ( 1.78%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::push_back(Edge const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 21,704,270 ( 1.73%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::base() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 20,788,368 ( 1.66%)  /usr/include/c++/11/new:operator new(unsigned long, void*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 19,199,616 ( 1.53%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<Edge>::construct<Edge, Edge const&>(Edge*, Edge const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 18,999,886 ( 1.51%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_M_incr(long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 18,179,854 ( 1.45%)  /usr/include/c++/11/bits/move.h:Edge&& std::forward<Edge>(std::remove_reference<Edge>::type&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 16,799,776 ( 1.34%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::base() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 15,599,844 ( 1.24%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator*() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 15,379,910 ( 1.22%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<Edge> >::destroy<Edge>(std::allocator<Edge>&, Edge*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 15,199,696 ( 1.21%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<Edge> >::construct<Edge, Edge const&>(std::allocator<Edge>&, Edge*, Edge const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 14,999,910 ( 1.19%)  /usr/include/c++/11/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 14,350,882 ( 1.14%)  /usr/include/c++/11/bits/move.h:Edge const& std::forward<Edge const&>(std::remove_reference<Edge const&>::type&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 13,866,129 ( 1.10%)  ./malloc/./malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc.so.6]
 12,999,896 ( 1.04%)  /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 12,599,736 ( 1.00%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator++() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 12,299,754 ( 0.98%)  /usr/include/c++/11/bits/vector.tcc:void std::vector<Edge, std::allocator<Edge> >::_M_realloc_insert<Edge>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, Edge&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 12,199,975 ( 0.97%)  MSTSolver.cpp:PrimSolver::solve(Graph&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 12,004,008 ( 0.96%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::__normal_iterator(Edge* const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 11,999,856 ( 0.96%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator[](long) const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 11,999,856 ( 0.96%)  /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 11,699,694 ( 0.93%)  Graph.cpp:Graph::DFS(int, std::vector<bool, std::allocator<bool> >&)'2 [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 11,393,955 ( 0.91%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 10,349,954 ( 0.82%)  /usr/include/c++/11/bits/stl_construct.h:void std::_Construct<Edge, Edge const&>(Edge*, Edge const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
 10,003,340 ( 0.80%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  9,600,000 ( 0.76%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::__normal_iterator(Edge const* const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  9,599,808 ( 0.76%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator++() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  9,599,800 ( 0.76%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  8,999,910 ( 0.72%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::_Bit_reference(unsigned long*, unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  8,788,520 ( 0.70%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<Edge>::destroy<Edge>(Edge*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  8,657,391 ( 0.69%)  ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
  8,399,832 ( 0.67%)  /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  8,389,941 ( 0.67%)  /usr/include/c++/11/bits/move.h:std::remove_reference<Edge&>::type&& std::move<Edge&>(Edge&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  8,000,000 ( 0.64%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  7,999,984 ( 0.64%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  7,603,211 ( 0.61%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  7,600,000 ( 0.61%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  7,500,165 ( 0.60%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  7,499,829 ( 0.60%)  Graph.cpp:Graph::addEdge(int, int, int) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  7,210,144 ( 0.57%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::size() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  7,083,777 ( 0.56%)  ./malloc/./malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
  6,999,958 ( 0.56%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator+=(long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  6,410,112 ( 0.51%)  /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__relocate_a<Edge*, Edge*, std::allocator<Edge> >(Edge*, Edge*, Edge*, std::allocator<Edge>&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  6,399,872 ( 0.51%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator*() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  6,299,916 ( 0.50%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator bool() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  6,000,000 ( 0.48%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  5,809,164 ( 0.46%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_M_check_len(unsigned long, char const*) const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  5,249,925 ( 0.42%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  5,008,075 ( 0.40%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_S_max_size(std::allocator<Edge> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  4,403,896 ( 0.35%)  ./malloc/./malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc.so.6]
  4,399,956 ( 0.35%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >::_Rb_tree_iterator(std::_Rb_tree_node_base*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  4,206,636 ( 0.33%)  /usr/include/c++/11/bits/stl_algobase.h:Edge* std::__niter_base<Edge*>(Edge*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  4,200,105 ( 0.33%)  /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__uninitialized_fill_n<false>::__uninit_fill_n<Edge*, unsigned long, Edge>(Edge*, unsigned long, Edge const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  4,054,455 ( 0.32%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<Edge>::allocate(unsigned long, void const*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,697,074 ( 0.29%)  MSTSolver.cpp:unionSets(std::vector<int, std::allocator<int> >&, std::vector<int, std::allocator<int> >&, int, int) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,599,952 ( 0.29%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_Rb_tree_const_iterator(std::_Rb_tree_iterator<std::tuple<int, int, int> > const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,599,928 ( 0.29%)  /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int, int, int>::_Tuple_impl<int&, int&, int&, void>(int&, int&, int&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,500,098 ( 0.28%)  /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__enable_if<!std::__is_scalar<Edge>::__value, void>::__type std::__fill_a1<Edge*, Edge>(Edge*, Edge*, Edge const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,499,930 ( 0.28%)  /usr/include/c++/11/tuple:std::tuple<int, int, int>::tuple<int&, int&, int&, true, true>(int&, int&, int&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,303,102 ( 0.26%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_deallocate(Edge*, unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,205,056 ( 0.26%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_S_do_relocate(Edge*, Edge*, Edge*, std::allocator<Edge>&, std::integral_constant<bool, true>) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,205,056 ( 0.26%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_S_relocate(Edge*, Edge*, Edge*, std::allocator<Edge>&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,199,958 ( 0.25%)  /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,199,936 ( 0.25%)  /usr/include/c++/11/bits/vector.tcc:Edge& std::vector<Edge, std::allocator<Edge> >::emplace_back<Edge>(Edge&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,150,000 ( 0.25%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  3,150,000 ( 0.25%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector(std::vector<Edge, std::allocator<Edge> > const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,999,940 ( 0.24%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator-(long) const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,950,000 ( 0.23%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> > std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_insert_<std::tuple<int, int, int>, std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::tuple<int, int, int>&&, std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Alloc_node&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,853,135 ( 0.23%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<Edge>::deallocate(Edge*, unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,804,634 ( 0.22%)  /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,800,504 ( 0.22%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::~_Vector_base() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,800,000 ( 0.22%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_insert_unique_pos(std::tuple<int, int, int> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,800,000 ( 0.22%)  /usr/include/c++/11/bits/stl_tree.h:std::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, bool> std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_insert_unique<std::tuple<int, int, int> >(std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,799,944 ( 0.22%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_erase_aux(std::_Rb_tree_const_iterator<std::tuple<int, int, int> >, std::_Rb_tree_const_iterator<std::tuple<int, int, int> >) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,699,946 ( 0.21%)  /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, int, int>::_Tuple_impl<int&, int&, void>(int&, int&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,649,947 ( 0.21%)  Graph.cpp:Graph::getEdge(int, int) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,499,950 ( 0.20%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::back() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,453,416 ( 0.20%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<Edge>::_M_max_size() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,452,387 ( 0.20%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_get_Tp_allocator() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,450,000 ( 0.20%)  /usr/include/c++/11/bits/move.h:std::tuple<int, int, int>&& std::forward<std::tuple<int, int, int> >(std::remove_reference<std::tuple<int, int, int> >::type&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,403,792 ( 0.19%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::difference_type __gnu_cxx::operator-<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,403,792 ( 0.19%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::max_size() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,402,640 ( 0.19%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<Edge> >::deallocate(std::allocator<Edge>&, Edge*, unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,402,640 ( 0.19%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_allocate(unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,402,100 ( 0.19%)  ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  2,399,952 ( 0.19%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::erase(std::tuple<int, int, int> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,300,120 ( 0.18%)  Graph.cpp:Graph::isConnected() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,249,955 ( 0.18%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::equal_range(std::tuple<int, int, int> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,200,396 ( 0.18%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::~vector() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,150,000 ( 0.17%)  ???:std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  2,102,310 ( 0.17%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<Edge> >::allocate(std::allocator<Edge>&, unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,003,230 ( 0.16%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<Edge> >::max_size(std::allocator<Edge> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,003,230 ( 0.16%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<Edge>::max_size() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  2,000,000 ( 0.16%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::begin() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,999,980 ( 0.16%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::begin() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,900,228 ( 0.15%)  Graph.hpp:Edge::Edge(int, int, int) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,799,964 ( 0.14%)  /usr/include/c++/11/tuple:std::_Tuple_impl<2ul, int>::_Tuple_impl<int&>(int&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,752,212 ( 0.14%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_get_Tp_allocator() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,700,000 ( 0.14%)  /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::insert(std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,700,000 ( 0.14%)  /usr/include/c++/11/bits/stl_tree.h:void std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_construct_node<std::tuple<int, int, int> >(std::_Rb_tree_node<std::tuple<int, int, int> >*, std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,699,966 ( 0.14%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::push_back(Edge&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,650,352 ( 0.13%)  /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::~allocator() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,610,934 ( 0.13%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_M_bump_up() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,593,520 ( 0.13%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,500,270 ( 0.12%)  /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<Edge*, Edge>(Edge*, Edge*, std::allocator<Edge>&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,500,210 ( 0.12%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_create_storage(unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,499,990 ( 0.12%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_begin() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,499,970 ( 0.12%)  /usr/include/c++/11/tuple:std::_Head_base<0ul, int, false>::_Head_base<int&>(int&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,499,970 ( 0.12%)  /usr/include/c++/11/tuple:std::_Head_base<1ul, int, false>::_Head_base<int&>(int&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,499,970 ( 0.12%)  /usr/include/c++/11/tuple:std::_Head_base<2ul, int, false>::_Head_base<int&>(int&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,452,236 ( 0.12%)  /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,450,000 ( 0.12%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::erase[abi:cxx11](std::_Rb_tree_const_iterator<std::tuple<int, int, int> >) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,400,252 ( 0.11%)  /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<Edge*>(Edge*, Edge*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,400,234 ( 0.11%)  /usr/include/c++/11/bits/stl_bvector.h:std::operator==(std::_Bit_iterator_base const&, std::_Bit_iterator_base const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,400,224 ( 0.11%)  /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::allocator(std::allocator<Edge> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,400,061 ( 0.11%)  /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,400,028 ( 0.11%)  /usr/include/c++/11/bits/stl_bvector.h:std::operator!=(std::_Bit_iterator_base const&, std::_Bit_iterator_base const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,400,000 ( 0.11%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_Node_allocator() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,350,000 ( 0.11%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::allocate(unsigned long, void const*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,300,208 ( 0.10%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl_data::_Vector_impl_data() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,300,000 ( 0.10%)  /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::erase[abi:cxx11](std::_Rb_tree_const_iterator<std::tuple<int, int, int> >) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,300,000 ( 0.10%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_erase_aux(std::_Rb_tree_const_iterator<std::tuple<int, int, int> >) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,299,974 ( 0.10%)  /usr/include/c++/11/bits/stl_tree.h:std::operator==(std::_Rb_tree_const_iterator<std::tuple<int, int, int> > const&, std::_Rb_tree_const_iterator<std::tuple<int, int, int> > const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,250,000 ( 0.10%)  /usr/include/c++/11/bits/stl_pair.h:std::pair<std::_Rb_tree_const_iterator<std::tuple<int, int, int> >, bool>::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >&, bool&, true>(std::_Rb_tree_iterator<std::tuple<int, int, int> >&, bool&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,199,992 ( 0.10%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_end() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,199,992 ( 0.10%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_mbegin() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,150,000 ( 0.09%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::construct<std::tuple<int, int, int>, std::tuple<int, int, int> >(std::tuple<int, int, int>*, std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,198 ( 0.09%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl::~_Vector_impl() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,154 ( 0.09%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_base(unsigned long, std::allocator<Edge> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,000 ( 0.09%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator++() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,000 ( 0.09%)  /usr/include/c++/11/bits/stl_pair.h:std::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, bool>::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, bool, true>(std::_Rb_tree_iterator<std::tuple<int, int, int> >&&, bool&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,000 ( 0.09%)  /usr/include/c++/11/bits/stl_pair.h:std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<std::tuple<int, int, int> >*&, std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node<std::tuple<int, int, int> >*&, std::_Rb_tree_node_base*&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,000 ( 0.09%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_Rb_tree_const_iterator(std::_Rb_tree_node_base const*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,000 ( 0.09%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >* std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_create_node<std::tuple<int, int, int> >(std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,000 ( 0.09%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >::_M_valptr() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,100,000 ( 0.09%)  Graph.cpp:Graph::getNeighbors(int) const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,099,978 ( 0.09%)  /usr/include/c++/11/bits/stl_pair.h:std::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, std::_Rb_tree_iterator<std::tuple<int, int, int> > >::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, std::_Rb_tree_iterator<std::tuple<int, int, int> >, true>(std::_Rb_tree_iterator<std::tuple<int, int, int> >&&, std::_Rb_tree_iterator<std::tuple<int, int, int> >&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,050,224 ( 0.08%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<Edge>::~new_allocator() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,050,105 ( 0.08%)  /usr/include/c++/11/bits/move.h:int&& std::forward<int>(std::remove_reference<int>::type&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,050,084 ( 0.08%)  Profiling.cpp:main [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,050,000 ( 0.08%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_destroy_node(std::_Rb_tree_node<std::tuple<int, int, int> >*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,049,986 ( 0.08%)  /usr/include/c++/11/bits/move.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >&& std::forward<std::_Rb_tree_iterator<std::tuple<int, int, int> > >(std::remove_reference<std::_Rb_tree_iterator<std::tuple<int, int, int> > >::type&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,049,979 ( 0.08%)  ./stdlib/./stdlib/random.c:random [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,000,000 ( 0.08%)  /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::begin() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,000,000 ( 0.08%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_M_const_cast() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,000,000 ( 0.08%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<std::tuple<int, int, int> >::_M_ptr() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
  1,000,000 ( 0.08%)  /usr/include/c++/11/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<Edge>, Edge>::_S_select_on_copy(std::allocator<Edge> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    999,980 ( 0.08%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::clear() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    999,980 ( 0.08%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::end() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    999,960 ( 0.08%)  Graph.hpp:Edge::operator==(int const&) const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    997,090 ( 0.08%)  ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    950,000 ( 0.08%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > > >::construct<std::tuple<int, int, int>, std::tuple<int, int, int> >(std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >&, std::tuple<int, int, int>*, std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    950,000 ( 0.08%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_drop_node(std::_Rb_tree_node<std::tuple<int, int, int> >*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    950,000 ( 0.08%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::deallocate(std::_Rb_tree_node<std::tuple<int, int, int> >*, unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    900,000 ( 0.07%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_put_node(std::_Rb_tree_node<std::tuple<int, int, int> >*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    900,000 ( 0.07%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >* std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Alloc_node::operator()<std::tuple<int, int, int> >(std::tuple<int, int, int>&&) const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    900,000 ( 0.07%)  /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int, int, int>::_Tuple_impl(std::_Tuple_impl<0ul, int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    900,000 ( 0.07%)  /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, int, int>::_Tuple_impl(std::_Tuple_impl<1ul, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    850,119 ( 0.07%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl::_Vector_impl(std::allocator<Edge> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    850,000 ( 0.07%)  /usr/include/c++/11/bits/stl_construct.h:void std::_Construct<std::vector<Edge, std::allocator<Edge> >>(std::vector<Edge, std::allocator<Edge> >*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    850,000 ( 0.07%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_header::_M_reset() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    800,144 ( 0.06%)  /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy_aux<true>::__destroy<Edge*>(Edge*, Edge*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    800,128 ( 0.06%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<Edge>::new_allocator(__gnu_cxx::new_allocator<Edge> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    800,000 ( 0.06%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > > >::deallocate(std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >&, std::_Rb_tree_node<std::tuple<int, int, int> >*, unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    800,000 ( 0.06%)  /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*, Edge>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*, std::allocator<Edge>&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    800,000 ( 0.06%)  /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::uninitialized_copy<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    800,000 ( 0.06%)  ???:std::_Rb_tree_increment(std::_Rb_tree_node_base const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    800,000 ( 0.06%)  ???:std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    799,984 ( 0.06%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::size() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    700,126 ( 0.06%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl::_Vector_impl() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    700,000 ( 0.06%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<Edge> >::select_on_container_copy_construction(std::allocator<Edge> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    700,000 ( 0.06%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > > >::allocate(std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >&, unsigned long) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    700,000 ( 0.06%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > > >::destroy<std::tuple<int, int, int> >(std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >&, std::tuple<int, int, int>*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    700,000 ( 0.06%)  /usr/include/c++/11/bits/move.h:std::vector<Edge, std::allocator<Edge> >* std::__addressof<std::vector<Edge, std::allocator<Edge> > >(std::vector<Edge, std::allocator<Edge> >&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    700,000 ( 0.06%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::operator++() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    700,000 ( 0.06%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<std::tuple<int, int, int> >::_M_addr() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    700,000 ( 0.06%)  /usr/include/c++/11/tuple:std::tuple<int, int, int>::tuple(std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    650,000 ( 0.05%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_erase(std::_Rb_tree_node<std::tuple<int, int, int> >*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    650,000 ( 0.05%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_node() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    650,000 ( 0.05%)  /usr/include/c++/11/bits/stl_tree.h:std::operator==(std::_Rb_tree_iterator<std::tuple<int, int, int> > const&, std::_Rb_tree_iterator<std::tuple<int, int, int> > const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    649,987 ( 0.05%)  /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::erase(std::tuple<int, int, int> const&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    600,498 ( 0.05%)  ./malloc/./malloc/arena.c:free
    600,000 ( 0.05%)  /usr/include/c++/11/tuple:std::_Tuple_impl<2ul, int>::_Tuple_impl(std::_Tuple_impl<2ul, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    600,000 ( 0.05%)  /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<int, int, int> >::type&& std::get<0ul, int, int, int>(std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    600,000 ( 0.05%)  /usr/include/c++/11/tuple:std::tuple_element<1ul, std::tuple<int, int, int> >::type&& std::get<1ul, int, int, int>(std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    600,000 ( 0.05%)  /usr/include/c++/11/tuple:std::tuple_element<2ul, std::tuple<int, int, int> >::type&& std::get<2ul, int, int, int>(std::tuple<int, int, int>&&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    579,221 ( 0.05%)  ./elf/./elf/dl-lookup.c:do_lookup_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    550,176 ( 0.04%)  /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::allocator() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    550,099 ( 0.04%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_base() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    550,099 ( 0.04%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector() [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    550,000 ( 0.04%)  /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<std::vector<Edge, std::allocator<Edge> > >(std::vector<Edge, std::allocator<Edge> >*) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    550,000 ( 0.04%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Alloc_node::_Alloc_node(std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    550,000 ( 0.04%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::operator*() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    550,000 ( 0.04%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >::_M_valptr() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    550,000 ( 0.04%)  /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int, int, int>::_M_head(std::_Tuple_impl<0ul, int, int, int>&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    550,000 ( 0.04%)  /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, int, int>::_M_head(std::_Tuple_impl<1ul, int, int>&) [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    500,010 ( 0.04%)  /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::empty() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    500,010 ( 0.04%)  /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::empty() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]
    500,000 ( 0.04%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<std::tuple<int, int, int> >::_M_ptr() const [/home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/profiling]

--------------------------------------------------------------------------------
-- Auto-annotated source: Profiling.cpp
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #include "Graph.hpp"
      .           #include <stack>
      .           #include "MSTFactory.hpp"
      .           #include "MSTSolver.hpp"
      .           
      .           
      .           #define NUM_VERTICES 50000
      .           
      8 ( 0.00%)  int main(){
      4 ( 0.00%)      std::srand(std::time(0)); // Seed the random number generator
  6,848 ( 0.00%)  => ???:0x000000000010b4e0 (1x)
      8 ( 0.00%)  => ???:0x000000000010b4d0 (1x)
      .           
      4 ( 0.00%)      Graph g(NUM_VERTICES);
5,401,316 ( 0.43%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::Graph(int) (1x)
      .           
150,001 ( 0.01%)      for (int i = 0; i < NUM_VERTICES-1; i++) {
899,982 ( 0.07%)          g.addEdge(i, i+1, std::rand() % 100);
162,349,839 (12.93%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::addEdge(int, int, int) (49,999x)
2,993,492 ( 0.24%)  => ???:0x000000000010b3b0 (49,999x)
      .               }
      .           
     18 ( 0.00%)      std::vector<Edge> mstEdges = MSTFactory::createSolver(MSTFactory::MSTType::PRIM)->solve(g);
342,278,286 (27.25%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/MSTSolver.cpp:PrimSolver::solve(Graph&) (1x)
    394 ( 0.00%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/MSTFactory.cpp:MSTFactory::createSolver(MSTFactory::MSTType) (1x)
    296 ( 0.00%)  => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTSolver, std::default_delete<MSTSolver> >::~unique_ptr() (1x)
     68 ( 0.00%)  => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTSolver, std::default_delete<MSTSolver> >::operator->() const (1x)
     16 ( 0.00%)      std::cout << "MST size: " << mstEdges.size() << std::endl;
  5,067 ( 0.00%)  => ???:0x000000000010b390 (1x)
  4,941 ( 0.00%)  => ???:0x000000000010b4f0 (1x)
  3,328 ( 0.00%)  => ???:0x000000000010b530 (1x)
     16 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::size() const (1x)
      .           
     18 ( 0.00%)      std::vector<Edge> mstEdges2 = MSTFactory::createSolver(MSTFactory::MSTType::BORUVKA)->solve(g);
723,335,573 (57.59%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/MSTSolver.cpp:BoruvkaSolver::solve(Graph&) (1x)
    250 ( 0.00%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/MSTFactory.cpp:MSTFactory::createSolver(MSTFactory::MSTType) (1x)
    296 ( 0.00%)  => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTSolver, std::default_delete<MSTSolver> >::~unique_ptr() (1x)
     68 ( 0.00%)  => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTSolver, std::default_delete<MSTSolver> >::operator->() const (1x)
     16 ( 0.00%)      std::cout << "MST size: " << mstEdges2.size() << std::endl;
    460 ( 0.00%)  => ???:0x000000000010b390 (1x)
    314 ( 0.00%)  => ???:0x000000000010b4f0 (1x)
    425 ( 0.00%)  => ???:0x000000000010b530 (1x)
     16 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::size() const (1x)
      .           
      1 ( 0.00%)      return 0;
     37 ( 0.00%)  }16,150,177 ( 1.29%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::~Graph() (1x)
    592 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::~vector() (2x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_set.h
--------------------------------------------------------------------------------
Ir               

-- line 159 ----------------------------------------
      .           
      .                 // allocation/deallocation
      .                 /**
      .                  *  @brief  Default constructor creates no elements.
      .                  */
      .           #if __cplusplus < 201103L
      .                 set() : _M_t() { }
      .           #else
     11 ( 0.00%)        set() = default;
     84 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Rb_tree() (1x)
      .           #endif
      .           
      .                 /**
      .                  *  @brief  Creates a %set with no elements.
      .                  *  @param  __comp  Comparator to use.
      .                  *  @param  __a  An allocator object.
      .                  */
      .                 explicit
-- line 175 ----------------------------------------
-- line 273 ----------------------------------------
      .           	: _M_t(_Key_alloc_type(__a))
      .           	{ _M_t._M_insert_range_unique(__first, __last); }
      .           
      .                 /**
      .                  *  The dtor only erases the elements, and note that if the elements
      .                  *  themselves are pointers, the pointed-to memory is not touched in any
      .                  *  way. Managing the pointer is the user's responsibility.
      .                  */
     11 ( 0.00%)        ~set() = default;
     79 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::~_Rb_tree() (1x)
      .           #endif
      .           
      .                 /**
      .                  *  @brief  %Set assignment operator.
      .                  *
      .                  *  Whether the allocator is copied depends on the allocator traits.
      .                  */
      .           #if __cplusplus < 201103L
-- line 289 ----------------------------------------
-- line 336 ----------------------------------------
      .                 { return allocator_type(_M_t.get_allocator()); }
      .           
      .                 /**
      .                  *  Returns a read-only (constant) iterator that points to the first
      .                  *  element in the %set.  Iteration is done in ascending order according
      .                  *  to the keys.
      .                  */
      .                 iterator
500,000 ( 0.04%)        begin() const _GLIBCXX_NOEXCEPT
500,000 ( 0.04%)        { return _M_t.begin(); }
3,100,000 ( 0.25%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::begin() const (100,000x)
      .           
      .                 /**
      .                  *  Returns a read-only (constant) iterator that points one past the last
      .                  *  element in the %set.  Iteration is done in ascending order according
      .                  *  to the keys.
      .                  */
      .                 iterator
      .                 end() const _GLIBCXX_NOEXCEPT
-- line 353 ----------------------------------------
-- line 406 ----------------------------------------
      .                  */
      .                 reverse_iterator
      .                 crend() const noexcept
      .                 { return _M_t.rend(); }
      .           #endif
      .           
      .                 ///  Returns true if the %set is empty.
      .                 _GLIBCXX_NODISCARD bool
250,005 ( 0.02%)        empty() const _GLIBCXX_NOEXCEPT
250,005 ( 0.02%)        { return _M_t.empty(); }
500,010 ( 0.04%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::empty() const (50,001x)
      .           
      .                 ///  Returns the size of the %set.
      .                 size_type
      .                 size() const _GLIBCXX_NOEXCEPT
      .                 { return _M_t.size(); }
      .           
      .                 ///  Returns the maximum size of the %set.
      .                 size_type
-- line 423 ----------------------------------------
-- line 510 ----------------------------------------
      .                 {
      .           	std::pair<typename _Rep_type::iterator, bool> __p =
      .           	  _M_t._M_insert_unique(__x);
      .           	return std::pair<iterator, bool>(__p.first, __p.second);
      .                 }
      .           
      .           #if __cplusplus >= 201103L
      .                 std::pair<iterator, bool>
500,000 ( 0.04%)        insert(value_type&& __x)
      .                 {
      .           	std::pair<typename _Rep_type::iterator, bool> __p =
450,000 ( 0.04%)  	  _M_t._M_insert_unique(std::move(__x));
39,250,288 ( 3.13%)  => /usr/include/c++/11/bits/stl_tree.h:std::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, bool> std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_insert_unique<std::tuple<int, int, int> >(std::tuple<int, int, int>&&) (50,000x)
350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::tuple<int, int, int>&>::type&& std::move<std::tuple<int, int, int>&>(std::tuple<int, int, int>&) (50,000x)
450,000 ( 0.04%)  	return std::pair<iterator, bool>(__p.first, __p.second);
2,550,000 ( 0.20%)  => /usr/include/c++/11/bits/stl_pair.h:std::pair<std::_Rb_tree_const_iterator<std::tuple<int, int, int> >, bool>::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >&, bool&, true>(std::_Rb_tree_iterator<std::tuple<int, int, int> >&, bool&) (50,000x)
300,000 ( 0.02%)        }
      .           #endif
      .           
      .                 /**
      .                  *  @brief Attempts to insert an element into the %set.
      .                  *  @param  __position  An iterator that serves as a hint as to where the
      .                  *                    element should be inserted.
      .                  *  @param  __x  Element to be inserted.
      .                  *  @return An iterator that points to the element with key of
-- line 531 ----------------------------------------
-- line 646 ----------------------------------------
      .                  *  This function erases an element, pointed to by the given iterator,
      .                  *  from a %set.  Note that this function only erases the element, and
      .                  *  that if the element is itself a pointer, the pointed-to memory is not
      .                  *  touched in any way.  Managing the pointer is the user's
      .                  *  responsibility.
      .                  */
      .                 _GLIBCXX_ABI_TAG_CXX11
      .                 iterator
450,000 ( 0.04%)        erase(const_iterator __position)
850,000 ( 0.07%)        { return _M_t.erase(__position); }
20,950,000 ( 1.67%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::erase[abi:cxx11](std::_Rb_tree_const_iterator<std::tuple<int, int, int> >) (50,000x)
600,000 ( 0.05%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_Rb_tree_const_iterator(std::_Rb_tree_iterator<std::tuple<int, int, int> > const&) (50,000x)
      .           #else
      .                 /**
      .                  *  @brief Erases an element from a %set.
      .                  *  @param  position  An iterator pointing to the element to be erased.
      .                  *
      .                  *  This function erases an element, pointed to by the given iterator,
      .                  *  from a %set.  Note that this function only erases the element, and
      .                  *  that if the element is itself a pointer, the pointed-to memory is not
-- line 663 ----------------------------------------
-- line 676 ----------------------------------------
      .                  *
      .                  *  This function erases all the elements located by the given key from
      .                  *  a %set.
      .                  *  Note that this function only erases the element, and that if
      .                  *  the element is itself a pointer, the pointed-to memory is not touched
      .                  *  in any way.  Managing the pointer is the user's responsibility.
      .                  */
      .                 size_type
299,994 ( 0.02%)        erase(const key_type& __x)
349,993 ( 0.03%)        { return _M_t.erase(__x); }
22,649,547 ( 1.80%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::erase(std::tuple<int, int, int> const&) (49,999x)
      .           
      .           #if __cplusplus >= 201103L
      .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
      .                 // DR 130. Associative erase should return an iterator.
      .                 /**
      .                  *  @brief Erases a [__first,__last) range of elements from a %set.
      .                  *  @param  __first  Iterator pointing to the start of the range to be
      .                  *                 erased.
-- line 693 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir               

-- line 56 ----------------------------------------
      .                 alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
      .           
      .                 __aligned_membuf() = default;
      .           
      .                 // Can be used to avoid value-initialization zeroing _M_storage.
      .                 __aligned_membuf(std::nullptr_t) { }
      .           
      .                 void*
400,000 ( 0.03%)        _M_addr() noexcept
300,000 ( 0.02%)        { return static_cast<void*>(&_M_storage); }
      .           
      .                 const void*
200,000 ( 0.02%)        _M_addr() const noexcept
150,000 ( 0.01%)        { return static_cast<const void*>(&_M_storage); }
      .           
      .                 _Tp*
500,000 ( 0.04%)        _M_ptr() noexcept
500,000 ( 0.04%)        { return static_cast<_Tp*>(_M_addr()); }
700,000 ( 0.06%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<std::tuple<int, int, int> >::_M_addr() (100,000x)
      .           
      .                 const _Tp*
250,000 ( 0.02%)        _M_ptr() const noexcept
250,000 ( 0.02%)        { return static_cast<const _Tp*>(_M_addr()); }
350,000 ( 0.03%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<std::tuple<int, int, int> >::_M_addr() const (50,000x)
      .               };
      .           
      .           #if _GLIBCXX_INLINE_VERSION
      .             template<typename _Tp>
      .               using __aligned_buffer = __aligned_membuf<_Tp>;
      .           #else
      .             // Similar to __aligned_membuf but aligned for complete objects, not members.
      .             // This type is used in <forward_list>, <future>, <bits/shared_ptr_base.h>
-- line 85 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/move.h
--------------------------------------------------------------------------------
Ir                  

-- line 41 ----------------------------------------
         .           
         .             // Used, in C++03 mode too, by allocators, etc.
         .             /**
         .              *  @brief Same as C++11 std::addressof
         .              *  @ingroup utilities
         .              */
         .             template<typename _Tp>
         .               inline _GLIBCXX_CONSTEXPR _Tp*
15,382,812 ( 1.22%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
11,537,109 ( 0.92%)      { return __builtin_addressof(__r); }
         .           
         .           #if __cplusplus >= 201103L
         .           
         .           _GLIBCXX_END_NAMESPACE_VERSION
         .           } // namespace
         .           
         .           #include <type_traits> // Brings in std::declval too.
         .           
-- line 58 ----------------------------------------
-- line 69 ----------------------------------------
         .              *  @brief  Forward an lvalue.
         .              *  @return The parameter cast to the specified type.
         .              *
         .              *  This function is used to implement "perfect forwarding".
         .              */
         .             template<typename _Tp>
         .               _GLIBCXX_NODISCARD
         .               constexpr _Tp&&
26,988,948 ( 2.15%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
20,241,711 ( 1.61%)      { return static_cast<_Tp&&>(__t); }
         .           
         .             /**
         .              *  @brief  Forward an rvalue.
         .              *  @return The parameter cast to the specified type.
         .              *
         .              *  This function is used to implement "perfect forwarding".
         .              */
         .             template<typename _Tp>
-- line 86 ----------------------------------------
-- line 96 ----------------------------------------
         .             /**
         .              *  @brief  Convert a value to an rvalue.
         .              *  @param  __t  A thing of arbitrary type.
         .              *  @return The parameter cast to an rvalue-reference to allow moving it.
         .             */
         .             template<typename _Tp>
         .               _GLIBCXX_NODISCARD
         .               constexpr typename std::remove_reference<_Tp>::type&&
 4,994,276 ( 0.40%)      move(_Tp&& __t) noexcept
 3,745,707 ( 0.30%)      { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
         .           
         .           
         .             template<typename _Tp>
         .               struct __move_if_noexcept_cond
         .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
         .                               is_copy_constructible<_Tp>>::type { };
         .           
         .             /**
-- line 113 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_bvector.h
--------------------------------------------------------------------------------
Ir                  

-- line 69 ----------------------------------------
         .             typedef unsigned long _Bit_type;
         .             enum { _S_word_bit = int(__CHAR_BIT__ * sizeof(_Bit_type)) };
         .           
         .             struct _Bit_reference
         .             {
         .               _Bit_type * _M_p;
         .               _Bit_type _M_mask;
         .           
 3,599,964 ( 0.29%)      _Bit_reference(_Bit_type * __x, _Bit_type __y)
 5,399,946 ( 0.43%)      : _M_p(__x), _M_mask(__y) { }
         .           
         .               _Bit_reference() _GLIBCXX_NOEXCEPT : _M_p(0), _M_mask(0) { }
         .           
         .           #if __cplusplus >= 201103L
         .               _Bit_reference(const _Bit_reference&) = default;
         .           #endif
         .           
 1,799,976 ( 0.14%)      operator bool() const _GLIBCXX_NOEXCEPT
 4,499,940 ( 0.36%)      { return !!(*_M_p & _M_mask); }
         .           
         .               _Bit_reference&
   900,000 ( 0.07%)      operator=(bool __x) _GLIBCXX_NOEXCEPT
         .               {
   300,000 ( 0.02%)        if (__x)
 1,500,000 ( 0.12%)  	*_M_p |= _M_mask;
         .                 else
         .           	*_M_p &= ~_M_mask;
   150,000 ( 0.01%)        return *this;
   300,000 ( 0.02%)      }
         .           
         .               _Bit_reference&
         .               operator=(const _Bit_reference& __x) _GLIBCXX_NOEXCEPT
         .               { return *this = bool(__x); }
         .           
         .               bool
         .               operator==(const _Bit_reference& __x) const
         .               { return bool(*this) == bool(__x); }
-- line 105 ----------------------------------------
-- line 140 ----------------------------------------
         .           #endif
         .           
         .             struct _Bit_iterator_base
         .             : public std::iterator<std::random_access_iterator_tag, bool>
         .             {
         .               _Bit_type * _M_p;
         .               unsigned int _M_offset;
         .           
 3,000,066 ( 0.24%)      _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 4,500,099 ( 0.36%)      : _M_p(__x), _M_offset(__y) { }
         .           
         .               void
   400,000 ( 0.03%)      _M_bump_up()
         .               {
   900,000 ( 0.07%)        if (_M_offset++ == int(_S_word_bit) - 1)
         .           	{
     3,124 ( 0.00%)  	  _M_offset = 0;
     7,810 ( 0.00%)  	  ++_M_p;
         .           	}
   300,000 ( 0.02%)      }
         .           
         .               void
         .               _M_bump_down()
         .               {
         .                 if (_M_offset-- == 0)
         .           	{
         .           	  _M_offset = int(_S_word_bit) - 1;
         .           	  --_M_p;
         .           	}
         .               }
         .           
         .               void
 2,499,985 ( 0.20%)      _M_incr(ptrdiff_t __i)
         .               {
 2,999,982 ( 0.24%)        difference_type __n = __i + _M_offset;
 5,499,967 ( 0.44%)        _M_p += __n / int(_S_word_bit);
 3,499,979 ( 0.28%)        __n = __n % int(_S_word_bit);
   999,994 ( 0.08%)        if (__n < 0)
         .           	{
         .           	  __n += int(_S_word_bit);
         .           	  --_M_p;
         .           	}
 1,999,988 ( 0.16%)        _M_offset = static_cast<unsigned int>(__n);
 1,499,991 ( 0.12%)      }
         .           
         .               friend _GLIBCXX20_CONSTEXPR bool
   500,010 ( 0.04%)      operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
   900,224 ( 0.07%)      { return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset; }
         .           
         .           #if __cpp_lib_three_way_comparison
         .               friend constexpr strong_ordering
         .               operator<=>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
         .               noexcept
         .               {
         .                 if (const auto __cmp = __x._M_p <=> __y._M_p; __cmp != 0)
         .           	return __cmp;
-- line 195 ----------------------------------------
-- line 199 ----------------------------------------
         .               friend bool
         .               operator<(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
         .               {
         .                 return __x._M_p < __y._M_p
         .           	    || (__x._M_p == __y._M_p && __x._M_offset < __y._M_offset);
         .               }
         .           
         .               friend bool
   600,012 ( 0.05%)      operator!=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
   800,016 ( 0.06%)      { return !(__x == __y); }
 1,400,234 ( 0.11%)  => /usr/include/c++/11/bits/stl_bvector.h:std::operator==(std::_Bit_iterator_base const&, std::_Bit_iterator_base const&) (100,002x)
         .           
         .               friend bool
         .               operator>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
         .               { return __y < __x; }
         .           
         .               friend bool
         .               operator<=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
         .               { return !(__y < __x); }
-- line 216 ----------------------------------------
-- line 233 ----------------------------------------
         .               typedef _Bit_reference  reference;
         .           #if __cplusplus > 201703L
         .               typedef void	    pointer;
         .           #else
         .               typedef _Bit_reference* pointer;
         .           #endif
         .               typedef _Bit_iterator   iterator;
         .           
       156 ( 0.00%)      _Bit_iterator() : _Bit_iterator_base(0, 0) { }
       180 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (12x)
         .           
 3,499,993 ( 0.28%)      _Bit_iterator(_Bit_type * __x, unsigned int __y)
 4,499,991 ( 0.36%)      : _Bit_iterator_base(__x, __y) { }
 7,499,985 ( 0.60%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (499,999x)
         .           
         .               iterator
         .               _M_const_cast() const
         .               { return *this; }
         .           
         .               reference
 4,799,952 ( 0.38%)      operator*() const
10,799,892 ( 0.86%)      { return reference(_M_p, 1UL << _M_offset); }
 8,999,910 ( 0.72%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::_Bit_reference(unsigned long*, unsigned long) (599,994x)
         .           
         .               iterator&
   500,000 ( 0.04%)      operator++()
         .               {
   300,000 ( 0.02%)        _M_bump_up();
 1,610,934 ( 0.13%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_M_bump_up() (100,000x)
   100,000 ( 0.01%)        return *this;
   200,000 ( 0.02%)      }
         .           
         .               iterator
         .               operator++(int)
         .               {
         .                 iterator __tmp = *this;
         .                 _M_bump_up();
         .                 return __tmp;
         .               }
-- line 267 ----------------------------------------
-- line 277 ----------------------------------------
         .               operator--(int)
         .               {
         .                 iterator __tmp = *this;
         .                 _M_bump_down();
         .                 return __tmp;
         .               }
         .           
         .               iterator&
 2,999,982 ( 0.24%)      operator+=(difference_type __i)
         .               {
 2,499,985 ( 0.20%)        _M_incr(__i);
18,999,886 ( 1.51%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_M_incr(long) (499,997x)
   499,997 ( 0.04%)        return *this;
   999,994 ( 0.08%)      }
         .           
         .               iterator&
         .               operator-=(difference_type __i)
         .               {
         .                 *this += -__i;
         .                 return *this;
         .               }
         .           
         .               reference
 4,499,946 ( 0.36%)      operator[](difference_type __i) const
 7,499,910 ( 0.60%)      { return *(*this + __i); }
40,999,508 ( 3.26%)  => /usr/include/c++/11/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) (499,994x)
20,499,754 ( 1.63%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator*() const (499,994x)
         .           
         .               friend iterator
 4,499,973 ( 0.36%)      operator+(const iterator& __x, difference_type __n)
         .               {
 2,499,985 ( 0.20%)        iterator __tmp = __x;
 2,499,985 ( 0.20%)        __tmp += __n;
25,999,844 ( 2.07%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator+=(long) (499,997x)
 2,999,982 ( 0.24%)        return __tmp;
 2,499,985 ( 0.20%)      }
         .           
         .               friend iterator
         .               operator+(difference_type __n, const iterator& __x)
         .               { return __x + __n; }
         .           
         .               friend iterator
         .               operator-(const iterator& __x, difference_type __n)
         .               {
-- line 316 ----------------------------------------
-- line 435 ----------------------------------------
         .           	  _Bit_type* _M_p;
         .           	  // Allow assignment from iterators (assume offset is zero):
         .           	  void operator=(_Bit_iterator __it) { _M_p = __it._M_p; }
         .           	} _M_start;
         .           #endif
         .           	_Bit_iterator	_M_finish;
         .           	_Bit_pointer	_M_end_of_storage;
         .           
        30 ( 0.00%)  	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
        54 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
       336 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator() (12x)
        18 ( 0.00%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	_Bvector_impl_data(const _Bvector_impl_data&) = default;
         .           	_Bvector_impl_data&
         .           	operator=(const _Bvector_impl_data&) = default;
         .           
         .           	_Bvector_impl_data(_Bvector_impl_data&& __x) noexcept
         .           	: _Bvector_impl_data(__x)
-- line 453 ----------------------------------------
-- line 457 ----------------------------------------
         .           	_M_move_data(_Bvector_impl_data&& __x) noexcept
         .           	{
         .           	  *this = __x;
         .           	  __x._M_reset();
         .           	}
         .           #endif
         .           
         .           	void
        27 ( 0.00%)  	_M_reset() _GLIBCXX_NOEXCEPT
        63 ( 0.00%)  	{ *this = _Bvector_impl_data(); }
       219 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_Bvector_impl_data() (3x)
         .           
         .           	void
         .           	_M_swap_data(_Bvector_impl_data& __x) _GLIBCXX_NOEXCEPT
         .           	{
         .           	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
         .           	  // information used by TBAA.
         .           	  std::swap(*this, __x);
         .           	}
         .                 };
         .           
        33 ( 0.00%)        struct _Bvector_impl
        54 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<unsigned long>::~allocator() (3x)
         .           	: public _Bit_alloc_type, public _Bvector_impl_data
         .                 {
         .           	_Bvector_impl() _GLIBCXX_NOEXCEPT_IF(
         .           	  is_nothrow_default_constructible<_Bit_alloc_type>::value)
         .           	: _Bit_alloc_type()
         .           	{ }
         .           
        18 ( 0.00%)  	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
        24 ( 0.00%)  	: _Bit_alloc_type(__a)
       219 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_Bvector_impl_data() (3x)
        66 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<unsigned long>::allocator(std::allocator<unsigned long> const&) (3x)
         9 ( 0.00%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	// Not defaulted, to enforce noexcept(true) even when
         .           	// !is_nothrow_move_constructible<_Bit_alloc_type>.
         .           	_Bvector_impl(_Bvector_impl&& __x) noexcept
         .           	: _Bit_alloc_type(std::move(__x)), _Bvector_impl_data(std::move(__x))
         .           	{ }
         .           
         .           	_Bvector_impl(_Bit_alloc_type&& __a, _Bvector_impl&& __x) noexcept
         .           	: _Bit_alloc_type(std::move(__a)), _Bvector_impl_data(std::move(__x))
         .           	{ }
         .           #endif
         .           
         .           	_Bit_type*
        30 ( 0.00%)  	_M_end_addr() const _GLIBCXX_NOEXCEPT
         .           	{
        24 ( 0.00%)  	  if (this->_M_end_of_storage)
        42 ( 0.00%)  	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
        42 ( 0.00%)  => /usr/include/c++/11/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (6x)
         .           	  return 0;
        12 ( 0.00%)  	}
         .                 };
         .           
         .               public:
         .                 typedef _Alloc allocator_type;
         .           
         .                 _Bit_alloc_type&
         .                 _M_get_Bit_allocator() _GLIBCXX_NOEXCEPT
         .                 { return this->_M_impl; }
-- line 515 ----------------------------------------
-- line 523 ----------------------------------------
         .                 { return allocator_type(_M_get_Bit_allocator()); }
         .           
         .           #if __cplusplus >= 201103L
         .                 _Bvector_base() = default;
         .           #else
         .                 _Bvector_base() { }
         .           #endif
         .           
        30 ( 0.00%)        _Bvector_base(const allocator_type& __a)
        60 ( 0.00%)        : _M_impl(__a) { }
       336 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_Bvector_impl(std::allocator<unsigned long> const&) (3x)
        57 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<unsigned long>::allocator<bool>(std::allocator<bool> const&) (3x)
        54 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<unsigned long>::~allocator() (3x)
         .           
         .           #if __cplusplus >= 201103L
         .                 _Bvector_base(_Bvector_base&&) = default;
         .           
         .                 _Bvector_base(_Bvector_base&& __x, const allocator_type& __a) noexcept
         .                 : _M_impl(_Bit_alloc_type(__a), std::move(__x._M_impl))
         .                 { }
         .           #endif
         .           
        15 ( 0.00%)        ~_Bvector_base()
        27 ( 0.00%)        { this->_M_deallocate(); }
       995 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_deallocate() (3x)
        87 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::~_Bvector_impl() (3x)
         .           
         .               protected:
         .                 _Bvector_impl _M_impl;
         .           
         .                 _Bit_pointer
        18 ( 0.00%)        _M_allocate(size_t __n)
        30 ( 0.00%)        { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
       966 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<unsigned long> >::allocate(std::allocator<unsigned long>&, unsigned long) (3x)
        27 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_S_nword(unsigned long) (3x)
         .           
         .                 void
        15 ( 0.00%)        _M_deallocate()
         .                 {
        12 ( 0.00%)  	if (_M_impl._M_start._M_p)
         .           	  {
        24 ( 0.00%)  	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
        75 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_M_end_addr() const (3x)
        18 ( 0.00%)  	    _Bit_alloc_traits::deallocate(_M_impl,
       509 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<unsigned long> >::deallocate(std::allocator<unsigned long>&, unsigned long*, unsigned long) (3x)
        15 ( 0.00%)  					  _M_impl._M_end_of_storage - __n,
         .           					  __n);
         9 ( 0.00%)  	    _M_impl._M_reset();
       309 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_M_reset() (3x)
         .           	  }
         9 ( 0.00%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 void
         .                 _M_move_data(_Bvector_base&& __x) noexcept
         .                 { _M_impl._M_move_data(std::move(__x._M_impl)); }
         .           #endif
         .           
         .                 static size_t
        24 ( 0.00%)        _S_nword(size_t __n)
        30 ( 0.00%)        { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
         .               };
         .           
         .             /**
         .              *  @brief  A specialization of vector for booleans which offers fixed time
         .              *  access to individual elements in any order.
         .              *
         .              *  @ingroup sequences
         .              *
-- line 581 ----------------------------------------
-- line 639 ----------------------------------------
         .                 : _Base(__a) { }
         .           
         .           #if __cplusplus >= 201103L
         .                 explicit
         .                 vector(size_type __n, const allocator_type& __a = allocator_type())
         .                 : vector(__n, false, __a)
         .                 { }
         .           
        27 ( 0.00%)        vector(size_type __n, const bool& __value,
         .           	     const allocator_type& __a = allocator_type())
         .           #else
         .                 explicit
         .                 vector(size_type __n, const bool& __value = bool(),
         .           	     const allocator_type& __a = allocator_type())
         .           #endif
        15 ( 0.00%)        : _Base(__a)
       537 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_base(std::allocator<bool> const&) (3x)
         .                 {
        15 ( 0.00%)  	_M_initialize(__n);
     1,599 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize(unsigned long) (3x)
        21 ( 0.00%)  	_M_initialize_value(__value);
    18,981 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize_value(bool) (3x)
        12 ( 0.00%)        }
         .           
         .                 vector(const vector& __x)
         .                 : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
         .                 {
         .           	_M_initialize(__x.size());
         .           	_M_copy_aligned(__x.begin(), __x.end(), begin());
         .                 }
         .           
-- line 666 ----------------------------------------
-- line 725 ----------------------------------------
         .           	: _Base(__a)
         .           	{
         .           	  // Check whether it's an integral type. If so, it's not an iterator.
         .           	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
         .           	  _M_initialize_dispatch(__first, __last, _Integral());
         .           	}
         .           #endif
         .           
        33 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT { }
     1,124 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::~_Bvector_base() (3x)
         .           
         .                 vector&
         .                 operator=(const vector& __x)
         .                 {
         .           	if (&__x == this)
         .           	  return *this;
         .           #if __cplusplus >= 201103L
         .           	if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
-- line 741 ----------------------------------------
-- line 823 ----------------------------------------
         .           
         .           #if __cplusplus >= 201103L
         .                 void
         .                 assign(initializer_list<bool> __l)
         .                 { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
         .           #endif
         .           
         .                 iterator
 3,999,968 ( 0.32%)        begin() _GLIBCXX_NOEXCEPT
 8,999,928 ( 0.72%)        { return iterator(this->_M_impl._M_start._M_p, 0); }
15,499,876 ( 1.23%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (499,996x)
         .           
         .                 const_iterator
         .                 begin() const _GLIBCXX_NOEXCEPT
         .                 { return const_iterator(this->_M_impl._M_start._M_p, 0); }
         .           
         .                 iterator
         8 ( 0.00%)        end() _GLIBCXX_NOEXCEPT
        18 ( 0.00%)        { return this->_M_impl._M_finish; }
         .           
         .                 const_iterator
         .                 end() const _GLIBCXX_NOEXCEPT
         .                 { return this->_M_impl._M_finish; }
         .           
         .                 reverse_iterator
         .                 rbegin() _GLIBCXX_NOEXCEPT
         .                 { return reverse_iterator(end()); }
-- line 848 ----------------------------------------
-- line 898 ----------------------------------------
         .                 { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
         .           			 - begin()); }
         .           
         .                 _GLIBCXX_NODISCARD bool
         .                 empty() const _GLIBCXX_NOEXCEPT
         .                 { return begin() == end(); }
         .           
         .                 reference
 4,499,946 ( 0.36%)        operator[](size_type __n)
 7,499,910 ( 0.60%)        { return begin()[__n]; }
73,499,118 ( 5.85%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator[](long) const (499,994x)
28,499,658 ( 2.27%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() (499,994x)
         .           
         .                 const_reference
         .                 operator[](size_type __n) const
         .                 { return begin()[__n]; }
         .           
         .               protected:
         .                 void
         .                 _M_range_check(size_type __n) const
-- line 915 ----------------------------------------
-- line 1129 ----------------------------------------
         .           		      iterator __result)
         .                 {
         .           	_Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
         .           	return std::copy(const_iterator(__last._M_p, 0), __last,
         .           			 iterator(__q, 0));
         .                 }
         .           
         .                 void
        27 ( 0.00%)        _M_initialize(size_type __n)
         .                 {
         6 ( 0.00%)  	if (__n)
         .           	  {
        18 ( 0.00%)  	    _Bit_pointer __q = this->_M_allocate(__n);
     1,041 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_allocate(unsigned long) (3x)
        24 ( 0.00%)  	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
        27 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_S_nword(unsigned long) (3x)
        27 ( 0.00%)  	    iterator __start = iterator(std::__addressof(*__q), 0);
        93 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (3x)
        21 ( 0.00%)  => /usr/include/c++/11/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (3x)
        15 ( 0.00%)  	    this->_M_impl._M_start = __start;
        36 ( 0.00%)  	    this->_M_impl._M_finish = __start + difference_type(__n);
       246 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) (3x)
         .           	  }
        18 ( 0.00%)        }
         .           
         .                 void
        21 ( 0.00%)        _M_initialize_value(bool __x)
         .                 {
        15 ( 0.00%)  	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
        24 ( 0.00%)  	  __builtin_memset(__p, __x ? ~0 : 0,
    18,825 ( 0.00%)  => ???:0x000000000010b420 (3x)
        12 ( 0.00%)  			   (this->_M_impl._M_end_addr() - __p)
        75 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_M_end_addr() const (3x)
         .           			   * sizeof(_Bit_type));
         9 ( 0.00%)        }
         .           
         .                 void
         .                 _M_reallocate(size_type __n);
         .           
         .           #if __cplusplus >= 201103L
         .                 bool
         .                 _M_shrink_to_fit();
         .           #endif
-- line 1164 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir                  

-- line 1019 ----------------------------------------
         .           #if __cplusplus > 201703L && __cpp_lib_concepts
         .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
         .           #endif
         .           
         .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
         .                 : _M_current(_Iterator()) { }
         .           
         .                 explicit _GLIBCXX20_CONSTEXPR
 9,001,670 ( 0.72%)        __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
12,602,338 ( 1.00%)        : _M_current(__i) { }
         .           
         .                 // Allow iterator to const_iterator conversion
         .                 template<typename _Iter>
         .                   _GLIBCXX20_CONSTEXPR
         .                   __normal_iterator(const __normal_iterator<_Iter,
         .           			  typename __enable_if<
         .                 	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
         .           		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
         .                   : _M_current(__i.base()) { }
         .           
         .                 // Forward iterator requirements
         .                 _GLIBCXX20_CONSTEXPR
         .                 reference
 7,999,836 ( 0.64%)        operator*() const _GLIBCXX_NOEXCEPT
 7,999,836 ( 0.64%)        { return *_M_current; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 pointer
         .                 operator->() const _GLIBCXX_NOEXCEPT
         .                 { return _M_current; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator&
 7,399,848 ( 0.59%)        operator++() _GLIBCXX_NOEXCEPT
         .                 {
 9,249,810 ( 0.74%)  	++_M_current;
 1,849,962 ( 0.15%)  	return *this;
 3,699,924 ( 0.29%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator
         .                 operator++(int) _GLIBCXX_NOEXCEPT
         .                 { return __normal_iterator(_M_current++); }
         .           
         .                 // Bidirectional iterator requirements
         .                 _GLIBCXX20_CONSTEXPR
-- line 1064 ----------------------------------------
-- line 1092 ----------------------------------------
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator&
         .                 operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
         .                 { _M_current -= __n; return *this; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator
   899,982 ( 0.07%)        operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 2,099,958 ( 0.17%)        { return __normal_iterator(_M_current - __n); }
 1,199,976 ( 0.10%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::__normal_iterator(Edge* const&) (99,998x)
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 const _Iterator&
22,002,312 ( 1.75%)        base() const _GLIBCXX_NOEXCEPT
16,501,734 ( 1.31%)        { return _M_current; }
         .               };
         .           
         .             // Note: In what follows, the left- and right-hand-side iterators are
         .             // allowed to vary in types (conceptually in cv-qualification) so that
         .             // comparison between cv-qualified and non-cv-qualified iterators be
         .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
         .             // will make overload resolution ambiguous (when in scope) if we don't
         .             // provide overloads whose operands are of the same type.  Can someone
-- line 1114 ----------------------------------------
-- line 1171 ----------------------------------------
         .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
         .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
         .               { return __lhs.base() != __rhs.base(); }
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX20_CONSTEXPR
         .               inline bool
17,849,762 ( 1.42%)      operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
         .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
33,149,558 ( 2.64%)      { return __lhs.base() != __rhs.base(); }
18,899,748 ( 1.50%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::base() const (2,699,964x)
         .           
         .             // Random access iterator requirements
         .             template<typename _IteratorL, typename _IteratorR, typename _Container>
         .               inline bool
         .               operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
         .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
         .               { return __lhs.base() < __rhs.base(); }
-- line 1190 ----------------------------------------
-- line 1260 ----------------------------------------
         .               operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
         .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
         .           #endif
         .               { return __lhs.base() - __rhs.base(); }
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX20_CONSTEXPR
         .               inline typename __normal_iterator<_Iterator, _Container>::difference_type
   701,106 ( 0.06%)      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
         .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
 1,702,686 ( 0.14%)      { return __lhs.base() - __rhs.base(); }
 1,402,212 ( 0.11%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::base() const (200,316x)
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX20_CONSTEXPR
         .               inline __normal_iterator<_Iterator, _Container>
         .               operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
         .           	      __n, const __normal_iterator<_Iterator, _Container>& __i)
         .               _GLIBCXX_NOEXCEPT
         .               { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1279 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir                  

-- line 89 ----------------------------------------
         .                  	pointer;
         .           
         .                 struct _Vector_impl_data
         .                 {
         .           	pointer _M_start;
         .           	pointer _M_finish;
         .           	pointer _M_end_of_storage;
         .           
   400,084 ( 0.03%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   600,126 ( 0.05%)  	: _M_start(), _M_finish(), _M_end_of_storage()
   300,063 ( 0.02%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
        10 ( 0.00%)  	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
        16 ( 0.00%)  	: _M_start(__x._M_start), _M_finish(__x._M_finish),
         8 ( 0.00%)  	  _M_end_of_storage(__x._M_end_of_storage)
        26 ( 0.00%)  	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
         .           #endif
         .           
         .           	void
         .           	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
         .           	{
         .           	  _M_start = __x._M_start;
         .           	  _M_finish = __x._M_finish;
         .           	  _M_end_of_storage = __x._M_end_of_storage;
-- line 113 ----------------------------------------
-- line 120 ----------------------------------------
         .           	  // information used by TBAA.
         .           	  _Vector_impl_data __tmp;
         .           	  __tmp._M_copy_data(*this);
         .           	  _M_copy_data(__x);
         .           	  __x._M_copy_data(__tmp);
         .           	}
         .                 };
         .           
 1,100,253 ( 0.09%)        struct _Vector_impl
 1,800,324 ( 0.14%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::~allocator() (100,018x)
         .           	: public _Tp_alloc_type, public _Vector_impl_data
         .                 {
   250,050 ( 0.02%)  	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
         .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
   300,060 ( 0.02%)  	: _Tp_alloc_type()
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::vector<Edge, std::allocator<Edge> > >::allocator() (1x)
        13 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_Vector_impl_data::_Vector_impl_data() (1x)
   150,030 ( 0.01%)  	{ }
         .           
   300,066 ( 0.02%)  	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   400,088 ( 0.03%)  	: _Tp_alloc_type(__a)
        88 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator(std::allocator<int> const&) (4x)
        52 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data() (4x)
   150,033 ( 0.01%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	// Not defaulted, to enforce noexcept(true) even when
         .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
        14 ( 0.00%)  	_Vector_impl(_Vector_impl&& __x) noexcept
        30 ( 0.00%)  	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
        60 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl_data&&) (2x)
        44 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::allocator(std::allocator<Edge> const&) (2x)
        28 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl&>::type&& std::move<std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl&>(std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl&) (4x)
         8 ( 0.00%)  	{ }
         .           
         .           	_Vector_impl(_Tp_alloc_type&& __a) noexcept
         .           	: _Tp_alloc_type(std::move(__a))
         .           	{ }
         .           
         .           	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
         .           	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
         .           	{ }
-- line 153 ----------------------------------------
-- line 268 ----------------------------------------
         .           #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
         .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
         .                 };
         .           
         .               public:
         .                 typedef _Alloc allocator_type;
         .           
         .                 _Tp_alloc_type&
 1,401,408 ( 0.11%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 1,051,056 ( 0.08%)        { return this->_M_impl; }
         .           
         .                 const _Tp_alloc_type&
 1,001,280 ( 0.08%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   750,960 ( 0.06%)        { return this->_M_impl; }
         .           
         .                 allocator_type
         .                 get_allocator() const _GLIBCXX_NOEXCEPT
         .                 { return allocator_type(_M_get_Tp_allocator()); }
         .           
         .           #if __cplusplus >= 201103L
   550,110 ( 0.04%)        _Vector_base() = default;
 2,250,405 ( 0.18%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl::_Vector_impl() (50,009x)
         .           #else
         .                 _Vector_base() { }
         .           #endif
         .           
         .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
         .                 : _M_impl(__a) { }
         .           
         .                 // Kept for ABI compatibility.
         .           #if !_GLIBCXX_INLINE_VERSION
         .                 _Vector_base(size_t __n)
         .                 : _M_impl()
         .                 { _M_create_storage(__n); }
         .           #endif
         .           
   400,088 ( 0.03%)        _Vector_base(size_t __n, const allocator_type& __a)
   250,055 ( 0.02%)        : _M_impl(__a)
       208 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&) (4x)
   450,099 ( 0.04%)        { _M_create_storage(__n); }
     1,698 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) (4x)
         .           
         .           #if __cplusplus >= 201103L
        28 ( 0.00%)        _Vector_base(_Vector_base&&) = default;
       184 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl::_Vector_impl(std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl&&) (2x)
         .           
         .                 // Kept for ABI compatibility.
         .           # if !_GLIBCXX_INLINE_VERSION
         .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
         .                 : _M_impl(std::move(__a)) { }
         .           
         .                 _Vector_base(_Vector_base&& __x, const allocator_type& __a)
         .                 : _M_impl(__a)
-- line 316 ----------------------------------------
-- line 325 ----------------------------------------
         .                 }
         .           # endif
         .           
         .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
         .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
         .                 { }
         .           #endif
         .           
   500,115 ( 0.04%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
         .                 {
   700,161 ( 0.06%)  	_M_deallocate(_M_impl._M_start,
16,254,273 ( 1.29%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_deallocate(Edge*, unsigned long) (100,018x)
 1,000,218 ( 0.08%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
   600,138 ( 0.05%)        }
 2,900,522 ( 0.23%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_impl::~_Vector_impl() (100,018x)
         .           
         .               public:
         .                 _Vector_impl _M_impl;
         .           
         .                 pointer
   901,020 ( 0.07%)        _M_allocate(size_t __n)
         .                 {
         .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 1,201,360 ( 0.10%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
23,308,452 ( 1.86%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<Edge> >::allocate(std::allocator<Edge>&, unsigned long) (150,165x)
   300,340 ( 0.02%)        }
         .           
         .                 void
 1,401,274 ( 0.11%)        _M_deallocate(pointer __p, size_t __n)
         .                 {
         .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
   400,364 ( 0.03%)  	if (__p)
   901,020 ( 0.07%)  	  _Tr::deallocate(_M_impl, __p, __n);
       624 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::deallocate(std::allocator<int>&, int*, unsigned long) (4x)
   600,546 ( 0.05%)        }
         .           
         .               protected:
         .                 void
   300,066 ( 0.02%)        _M_create_storage(size_t __n)
         .                 {
   350,077 ( 0.03%)  	this->_M_impl._M_start = this->_M_allocate(__n);
 6,153,204 ( 0.49%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_allocate(unsigned long) (50,007x)
   200,044 ( 0.02%)  	this->_M_impl._M_finish = this->_M_impl._M_start;
   500,098 ( 0.04%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   150,033 ( 0.01%)        }
         .               };
         .           
         .             /**
         .              *  @brief A standard container which offers fixed time access to
         .              *  individual elements in any order.
         .              *
         .              *  @ingroup sequences
         .              *
-- line 372 ----------------------------------------
-- line 445 ----------------------------------------
         .                 {
         .           	// Instantiating std::__relocate_a might cause an error outside the
         .           	// immediate context (in __relocate_object_a's noexcept-specifier),
         .           	// so only do it if we know the type can be move-inserted into *this.
         .           	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
         .                 }
         .           
         .                 static pointer
 1,602,536 ( 0.13%)        _S_do_relocate(pointer __first, pointer __last, pointer __result,
         .           		     _Tp_alloc_type& __alloc, true_type) noexcept
         .                 {
 1,201,902 ( 0.10%)  	return std::__relocate_a(__first, __last, __result, __alloc);
190,193,152 (15.14%)  => /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__relocate_a<Edge*, Edge*, std::allocator<Edge> >(Edge*, Edge*, Edge*, std::allocator<Edge>&) (200,316x)
   400,634 ( 0.03%)        }
         .           
         .                 static pointer
         .                 _S_do_relocate(pointer, pointer, pointer __result,
         .           		     _Tp_alloc_type&, false_type) noexcept
         .                 { return __result; }
         .           
         .                 static pointer
 1,602,536 ( 0.13%)        _S_relocate(pointer __first, pointer __last, pointer __result,
         .           		  _Tp_alloc_type& __alloc) noexcept
         .                 {
         .           	using __do_it = __bool_constant<_S_use_relocate()>;
 1,201,902 ( 0.10%)  	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
193,398,208 (15.40%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_S_do_relocate(Edge*, Edge*, Edge*, std::allocator<Edge>&, std::integral_constant<bool, true>) (200,316x)
   400,634 ( 0.03%)        }
         .           #endif // C++11
         .           
         .               protected:
         .                 using _Base::_M_allocate;
         .                 using _Base::_M_deallocate;
         .                 using _Base::_M_impl;
         .                 using _Base::_M_get_Tp_allocator;
         .           
-- line 478 ----------------------------------------
-- line 479 ----------------------------------------
         .               public:
         .                 // [23.2.4.1] construct/copy/destroy
         .                 // (assign() and get_allocator() are also listed in this section)
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with no elements.
         .                  */
         .           #if __cplusplus >= 201103L
   550,110 ( 0.04%)        vector() = default;
        56 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_Vector_base() (1x)
         .           #else
         .                 vector() { }
         .           #endif
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with no elements.
         .                  *  @param  __a  An allocator object.
         .                  */
-- line 495 ----------------------------------------
-- line 502 ----------------------------------------
         .                  *  @brief  Creates a %vector with default constructed elements.
         .                  *  @param  __n  The number of elements to initially create.
         .                  *  @param  __a  An allocator.
         .                  *
         .                  *  This constructor fills the %vector with @a __n default
         .                  *  constructed elements.
         .                  */
         .                 explicit
         8 ( 0.00%)        vector(size_type __n, const allocator_type& __a = allocator_type())
        12 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
       529 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (1x)
       138 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_check_init_len(unsigned long, std::allocator<int> const&) (1x)
         9 ( 0.00%)        { _M_default_initialize(__n); }
   350,195 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_default_initialize(unsigned long) (1x)
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with copies of an exemplar element.
         .                  *  @param  __n  The number of elements to initially create.
         .                  *  @param  __value  An element to copy.
         .                  *  @param  __a  An allocator.
         .                  *
         .                  *  This constructor fills the %vector with @a __n copies of @a __value.
         .                  */
        90 ( 0.00%)        vector(size_type __n, const value_type& __value,
         .           	     const allocator_type& __a = allocator_type())
       120 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
     1,465 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (3x)
       414 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_check_init_len(unsigned long, std::allocator<int> const&) (3x)
       100 ( 0.00%)        { _M_fill_initialize(__n, __value); }
 1,050,501 ( 0.08%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_fill_initialize(unsigned long, int const&) (3x)
         .           #else
         .                 /**
         .                  *  @brief  Creates a %vector with copies of an exemplar element.
         .                  *  @param  __n  The number of elements to initially create.
         .                  *  @param  __value  An element to copy.
         .                  *  @param  __a  An allocator.
         .                  *
         .                  *  This constructor fills the %vector with @a __n copies of @a __value.
-- line 533 ----------------------------------------
-- line 545 ----------------------------------------
         .                  *
         .                  *  All the elements of @a __x are copied, but any unused capacity in
         .                  *  @a __x  will not be copied
         .                  *  (i.e. capacity() == size() in the new %vector).
         .                  *
         .                  *  The newly-created %vector uses a copy of the allocator object used
         .                  *  by @a __x (unless the allocator traits dictate a different object).
         .                  */
   600,000 ( 0.05%)        vector(const vector& __x)
         .                 : _Base(__x.size(),
 1,050,000 ( 0.08%)  	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
11,350,288 ( 0.90%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_base(unsigned long, std::allocator<Edge> const&) (50,000x)
 2,800,000 ( 0.22%)  => /usr/include/c++/11/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<Edge>, Edge>::_S_select_on_copy(std::allocator<Edge> const&) (50,000x)
   900,000 ( 0.07%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::~allocator() (50,000x)
   800,000 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::size() const (50,000x)
   350,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_get_Tp_allocator() const (50,000x)
         .                 {
   100,000 ( 0.01%)  	this->_M_impl._M_finish =
   700,000 ( 0.06%)  	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
16,399,760 ( 1.31%)  => /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*, Edge>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*, std::allocator<Edge>&) (50,000x)
 1,600,000 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() const (50,000x)
 1,550,000 ( 0.12%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() const (50,000x)
         .           				      this->_M_impl._M_start,
   200,000 ( 0.02%)  				      _M_get_Tp_allocator());
   350,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_get_Tp_allocator() (50,000x)
   500,000 ( 0.04%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  @brief  %Vector move constructor.
         .                  *
         .                  *  The newly-created %vector contains the exact contents of the
         .                  *  moved instance.
         .                  *  The contents of the moved instance are a valid, but unspecified
         .                  *  %vector.
         .                  */
        28 ( 0.00%)        vector(vector&&) noexcept = default;
       212 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_Vector_base(std::_Vector_base<Edge, std::allocator<Edge> >&&) (2x)
         .           
         .                 /// Copy constructor with alternative allocator
         .                 vector(const vector& __x, const allocator_type& __a)
         .                 : _Base(__x.size(), __a)
         .                 {
         .           	this->_M_impl._M_finish =
         .           	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
         .           				      this->_M_impl._M_start,
-- line 580 ----------------------------------------
-- line 670 ----------------------------------------
         .           #endif
         .           
         .                 /**
         .                  *  The dtor only erases the elements, and note that if the
         .                  *  elements themselves are pointers, the pointed-to memory is
         .                  *  not touched in any way.  Managing the pointer is the user's
         .                  *  responsibility.
         .                  */
   500,115 ( 0.04%)        ~vector() _GLIBCXX_NOEXCEPT
         .                 {
   700,161 ( 0.06%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
16,149,957 ( 1.29%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<std::vector<Edge, std::allocator<Edge> >*, std::vector<Edge, std::allocator<Edge> > >(std::vector<Edge, std::allocator<Edge> >*, std::vector<Edge, std::allocator<Edge> >*, std::allocator<std::vector<Edge, std::allocator<Edge> > >&) (1x)
   400,092 ( 0.03%)  		      _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_M_get_Tp_allocator() (1x)
         .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
   600,138 ( 0.05%)        }
       179 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::~_Vector_base() (1x)
         .           
         .                 /**
         .                  *  @brief  %Vector assignment operator.
         .                  *  @param  __x  A %vector of identical element and allocator types.
         .                  *
         .                  *  All the elements of @a __x are copied, but any unused capacity in
         .                  *  @a __x will not be copied.
         .                  *
-- line 691 ----------------------------------------
-- line 803 ----------------------------------------
         .           
         .                 // iterators
         .                 /**
         .                  *  Returns a read/write iterator that points to the first
         .                  *  element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 iterator
 3,201,352 ( 0.25%)        begin() _GLIBCXX_NOEXCEPT
 4,401,859 ( 0.35%)        { return iterator(this->_M_impl._M_start); }
 4,802,028 ( 0.38%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::__normal_iterator(Edge* const&) (400,169x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points to the
         .                  *  first element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 const_iterator
 3,200,000 ( 0.25%)        begin() const _GLIBCXX_NOEXCEPT
 4,400,000 ( 0.35%)        { return const_iterator(this->_M_impl._M_start); }
 4,800,000 ( 0.38%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::__normal_iterator(Edge const* const&) (400,000x)
         .           
         .                 /**
         .                  *  Returns a read/write iterator that points one past the last
         .                  *  element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 iterator
 4,001,336 ( 0.32%)        end() _GLIBCXX_NOEXCEPT
 6,002,004 ( 0.48%)        { return iterator(this->_M_impl._M_finish); }
 6,002,004 ( 0.48%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::__normal_iterator(Edge* const&) (500,167x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points one past
         .                  *  the last element in the %vector.  Iteration is done in
         .                  *  ordinary element order.
         .                  */
         .                 const_iterator
 3,200,000 ( 0.25%)        end() const _GLIBCXX_NOEXCEPT
 4,800,000 ( 0.38%)        { return const_iterator(this->_M_impl._M_finish); }
 4,800,000 ( 0.38%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::__normal_iterator(Edge const* const&) (400,000x)
         .           
         .                 /**
         .                  *  Returns a read/write reverse iterator that points to the
         .                  *  last element in the %vector.  Iteration is done in reverse
         .                  *  element order.
         .                  */
         .                 reverse_iterator
         .                 rbegin() _GLIBCXX_NOEXCEPT
-- line 847 ----------------------------------------
-- line 910 ----------------------------------------
         .                 const_reverse_iterator
         .                 crend() const noexcept
         .                 { return const_reverse_iterator(begin()); }
         .           #endif
         .           
         .                 // [23.2.4.2] capacity
         .                 /**  Returns the number of elements in the %vector.  */
         .                 size_type
 1,802,564 ( 0.14%)        size() const _GLIBCXX_NOEXCEPT
 5,407,692 ( 0.43%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
         .           
         .                 /**  Returns the size() of the largest possible %vector.  */
         .                 size_type
 1,001,600 ( 0.08%)        max_size() const _GLIBCXX_NOEXCEPT
 1,402,240 ( 0.11%)        { return _S_max_size(_M_get_Tp_allocator()); }
13,220,856 ( 1.05%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_S_max_size(std::allocator<Edge> const&) (200,316x)
 1,402,212 ( 0.11%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_get_Tp_allocator() const (200,316x)
         .           
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  @brief  Resizes the %vector to the specified number of elements.
         .                  *  @param  __new_size  Number of elements the %vector should contain.
         .                  *
         .                  *  This function will %resize the %vector to the specified
         .                  *  number of elements.  If the number is smaller than the
         .                  *  %vector's current size the %vector is truncated, otherwise
         .                  *  default constructed elements are appended.
         .                  */
         .                 void
         6 ( 0.00%)        resize(size_type __new_size)
         .                 {
         7 ( 0.00%)  	if (__new_size > size())
        16 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::size() const (1x)
        11 ( 0.00%)  	  _M_default_append(__new_size - size());
 5,401,164 ( 0.43%)  => /usr/include/c++/11/bits/vector.tcc:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_M_default_append(unsigned long) (1x)
        16 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::size() const (1x)
         .           	else if (__new_size < size())
         .           	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
         4 ( 0.00%)        }
         .           
         .                 /**
         .                  *  @brief  Resizes the %vector to the specified number of elements.
         .                  *  @param  __new_size  Number of elements the %vector should contain.
         .                  *  @param  __x  Data with which new elements should be populated.
         .                  *
         .                  *  This function will %resize the %vector to the specified
         .                  *  number of elements.  If the number is smaller than the
-- line 951 ----------------------------------------
-- line 1035 ----------------------------------------
         .                  *  @return  Read/write reference to data.
         .                  *
         .                  *  This operator allows for easy, array-style, data access.
         .                  *  Note that data access with this operator is unchecked and
         .                  *  out_of_range lookups are not defined. (For checked lookups
         .                  *  see at().)
         .                  */
         .                 reference
51,769,330 ( 4.12%)        operator[](size_type __n) _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_subscript(__n);
55,098,106 ( 4.39%)  	return *(this->_M_impl._M_start + __n);
20,707,732 ( 1.65%)        }
         .           
         .                 /**
         .                  *  @brief  Subscript access to the data contained in the %vector.
         .                  *  @param __n The index of the element for which data should be
         .                  *  accessed.
         .                  *  @return  Read-only (constant) reference to data.
         .                  *
         .                  *  This operator allows for easy, array-style, data access.
         .                  *  Note that data access with this operator is unchecked and
         .                  *  out_of_range lookups are not defined. (For checked lookups
         .                  *  see at().)
         .                  */
         .                 const_reference
 2,000,000 ( 0.16%)        operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_subscript(__n);
 3,200,000 ( 0.25%)  	return *(this->_M_impl._M_start + __n);
   800,000 ( 0.06%)        }
         .           
         .               protected:
         .                 /// Safety check used only from at().
         .                 void
         .                 _M_range_check(size_type __n) const
         .                 {
         .           	if (__n >= this->size())
         .           	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
-- line 1073 ----------------------------------------
-- line 1135 ----------------------------------------
         .           	return *begin();
         .                 }
         .           
         .                 /**
         .                  *  Returns a read/write reference to the data at the last
         .                  *  element of the %vector.
         .                  */
         .                 reference
   799,984 ( 0.06%)        back() _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_nonempty();
 1,199,976 ( 0.10%)  	return *(end() - 1);
 4,199,916 ( 0.33%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator-(long) const (99,998x)
 3,199,936 ( 0.25%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (99,998x)
   799,984 ( 0.06%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const (99,998x)
   499,990 ( 0.04%)        }
         .           
         .                 /**
         .                  *  Returns a read-only (constant) reference to the data at the
         .                  *  last element of the %vector.
         .                  */
         .                 const_reference
         .                 back() const _GLIBCXX_NOEXCEPT
         .                 {
-- line 1155 ----------------------------------------
-- line 1179 ----------------------------------------
         .                  *
         .                  *  This is a typical stack operation.  The function creates an
         .                  *  element at the end of the %vector and assigns the given data
         .                  *  to it.  Due to the nature of a %vector this operation can be
         .                  *  done in constant time if the %vector has preallocated space
         .                  *  available.
         .                  */
         .                 void
 4,799,904 ( 0.38%)        push_back(const value_type& __x)
         .                 {
 4,799,904 ( 0.38%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
         .           	  {
         .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 5,598,768 ( 0.45%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
51,988,560 ( 4.14%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<Edge> >::construct<Edge, Edge const&>(std::allocator<Edge>&, Edge*, Edge const&) (799,824x)
         .           				     __x);
 3,999,120 ( 0.32%)  	    ++this->_M_impl._M_finish;
         .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         .           	  }
         .           	else
     1,440 ( 0.00%)  	  _M_realloc_insert(end(), __x);
167,986,633 (13.38%)  => /usr/include/c++/11/bits/vector.tcc:void std::vector<Edge, std::allocator<Edge> >::_M_realloc_insert<Edge const&>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, Edge const&) (160x)
     5,120 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (160x)
 3,199,776 ( 0.25%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 void
   599,988 ( 0.05%)        push_back(value_type&& __x)
 1,099,978 ( 0.09%)        { emplace_back(std::move(__x)); }
134,150,498 (10.68%)  => /usr/include/c++/11/bits/vector.tcc:Edge& std::vector<Edge, std::allocator<Edge> >::emplace_back<Edge>(Edge&&) (99,998x)
   699,986 ( 0.06%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<Edge&>::type&& std::move<Edge&>(Edge&) (99,998x)
         .           
         .                 template<typename... _Args>
         .           #if __cplusplus > 201402L
         .           	reference
         .           #else
         .           	void
         .           #endif
         .           	emplace_back(_Args&&... __args);
-- line 1212 ----------------------------------------
-- line 1585 ----------------------------------------
         .           	    std::__uninitialized_copy_a(__first, __last,
         .           					this->_M_impl._M_start,
         .           					_M_get_Tp_allocator());
         .           	}
         .           
         .                 // Called by the first initialize_dispatch above and by the
         .                 // vector(n,value,a) constructor.
         .                 void
        70 ( 0.00%)        _M_fill_initialize(size_type __n, const value_type& __value)
         .                 {
        20 ( 0.00%)  	this->_M_impl._M_finish =
        60 ( 0.00%)  	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 1,050,414 ( 0.08%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_fill_n_a<int*, unsigned long, int, int>(int*, unsigned long, int const&, std::allocator<int>&) (3x)
        40 ( 0.00%)  					_M_get_Tp_allocator());
        21 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (3x)
        30 ( 0.00%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 // Called by the vector(n) constructor.
         .                 void
         6 ( 0.00%)        _M_default_initialize(size_type __n)
         .                 {
         2 ( 0.00%)  	this->_M_impl._M_finish =
         6 ( 0.00%)  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
   350,167 ( 0.03%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_default_n_a<int*, unsigned long, int>(int*, unsigned long, std::allocator<int>&) (1x)
         4 ( 0.00%)  					   _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
         3 ( 0.00%)        }
         .           #endif
         .           
         .                 // Internal assign functions follow.  The *_aux functions do the actual
         .                 // assignment work for the range versions.
         .           
         .                 // Called by the range assign to implement [23.1.1]/9
         .           
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1616 ----------------------------------------
-- line 1748 ----------------------------------------
         .                 // Emplacing an rvalue of the correct type can use _M_insert_rval.
         .                 iterator
         .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
         .                 { return _M_insert_rval(__position, std::move(__v)); }
         .           #endif
         .           
         .                 // Called by _M_fill_insert, _M_insert_aux etc.
         .                 size_type
 1,101,749 ( 0.09%)        _M_check_len(size_type __n, const char* __s) const
         .                 {
 1,402,226 ( 0.11%)  	if (max_size() - size() < __n)
        85 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::max_size() const (1x)
        16 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::size() const (1x)
         .           	  __throw_length_error(__N(__s));
         .           
 1,602,544 ( 0.13%)  	const size_type __len = size() + (std::max)(size(), __n);
        32 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::size() const (2x)
        15 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (1x)
 1,101,749 ( 0.09%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
        85 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::max_size() const (1x)
        16 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::size() const (1x)
   600,954 ( 0.05%)        }
         .           
         .                 // Called by constructors to check initial size.
         .                 static size_type
       110 ( 0.00%)        _S_check_init_len(size_type __n, const allocator_type& __a)
         .                 {
       165 ( 0.00%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
       462 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_S_max_size(std::allocator<Edge> const&) (7x)
       154 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::allocator(std::allocator<Edge> const&) (7x)
       126 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::~allocator() (7x)
         .           	  __throw_length_error(
         .           	      __N("cannot create std::vector larger than max_size()"));
        11 ( 0.00%)  	return __n;
        66 ( 0.00%)        }
         .           
         .                 static size_type
 1,602,648 ( 0.13%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
         .                 {
         .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
         .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
         .           	// (even if std::allocator_traits::max_size says we can).
   400,662 ( 0.03%)  	const size_t __diffmax
         .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
   801,324 ( 0.06%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
       108 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::vector<Edge, std::allocator<Edge> > > >::max_size(std::allocator<std::vector<Edge, std::allocator<Edge> > > const&) (4x)
 1,201,986 ( 0.10%)  	return (std::min)(__diffmax, __allocmax);
        56 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (4x)
 1,001,655 ( 0.08%)        }
         .           
         .                 // Internal erase functions follow.
         .           
         .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         .                 // _M_assign_aux.
         .                 void
         .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
         .                 {
-- line 1793 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Graph.hpp
--------------------------------------------------------------------------------
Ir                 

-- line 6 ----------------------------------------
        .           #include <iostream>
        .           #include <fstream>      // for the show() function
        .           #include <stack>
        .           
        .           // Edge struct to simplify working with edges - better in terms of readability
        .           // Not really necessary, we could use std::tuple<int, int, int> instead for all 3 values (which might have been better in terms of memory)
        .           struct Edge {
        .               int u, v, weight;
1,900,228 ( 0.15%)      Edge(int u, int v, int weight) : u(u), v(v), weight(weight) {}
        .           
        .               // Overload the == operator to compare edges
        .               bool operator==(const Edge& other) const {
        .                   return (u == other.u && v == other.v && weight == other.weight) || (u == other.v && v == other.u && weight == other.weight);
        .               }
        .           
  249,990 ( 0.02%)      bool operator==(const int& other) const {
  649,974 ( 0.05%)          return u == other || v == other;
   99,996 ( 0.01%)      }
        .           
        .               inline friend std::ostream& operator<<(std::ostream& os, const Edge& edge) {
        .                   os << edge.u << " -> " << edge.v << " (" << edge.weight << ")";
        .                   return os;
        .               }
        .           };
        .           
        .           // Weighted, undirected graph class
-- line 31 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/tuple
--------------------------------------------------------------------------------
Ir                 

-- line 72 ----------------------------------------
        .             template<size_t _Idx, typename _Head,
        .           	   bool = __empty_not_final<_Head>::value>
        .               struct _Head_base;
        .           
        .           #if __has_cpp_attribute(__no_unique_address__)
        .             template<size_t _Idx, typename _Head>
        .               struct _Head_base<_Idx, _Head, true>
        .               {
        8 ( 0.00%)        constexpr _Head_base()
        6 ( 0.00%)        : _M_head_impl() { }
        .           
        .                 constexpr _Head_base(const _Head& __h)
        .                 : _M_head_impl(__h) { }
        .           
        .                 constexpr _Head_base(const _Head_base&) = default;
        .                 constexpr _Head_base(_Head_base&&) = default;
        .           
        .                 template<typename _UHead>
-- line 89 ----------------------------------------
-- line 116 ----------------------------------------
        .           	{ }
        .           
        .                 template<typename _Alloc, typename _UHead>
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
        .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
        .           
        .                 static constexpr _Head&
       14 ( 0.00%)        _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
        .           
        .                 static constexpr const _Head&
        .                 _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
        .           
        .                 [[__no_unique_address__]] _Head _M_head_impl;
        .               };
        .           #else
        .             template<size_t _Idx, typename _Head>
-- line 132 ----------------------------------------
-- line 181 ----------------------------------------
        .                 static constexpr const _Head&
        .                 _M_head(const _Head_base& __b) noexcept { return __b; }
        .               };
        .           #endif
        .           
        .             template<size_t _Idx, typename _Head>
        .               struct _Head_base<_Idx, _Head, false>
        .               {
        8 ( 0.00%)        constexpr _Head_base()
       10 ( 0.00%)        : _M_head_impl() { }
        .           
        .                 constexpr _Head_base(const _Head& __h)
        .                 : _M_head_impl(__h) { }
        .           
        .                 constexpr _Head_base(const _Head_base&) = default;
        .                 constexpr _Head_base(_Head_base&&) = default;
        .           
        .                 template<typename _UHead>
1,799,982 ( 0.14%)          constexpr _Head_base(_UHead&& __h)
2,699,973 ( 0.21%)  	: _M_head_impl(std::forward<_UHead>(__h)) { }
  699,986 ( 0.06%)  => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (99,998x)
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Head_base(allocator_arg_t, __uses_alloc0)
        .                 : _M_head_impl() { }
        .           
        .                 template<typename _Alloc>
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
-- line 208 ----------------------------------------
-- line 225 ----------------------------------------
        .           	{ }
        .           
        .                 template<typename _Alloc, typename _UHead>
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
        .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
        .           
        .                 static constexpr _Head&
1,050,028 ( 0.08%)        _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
        .           
        .                 static constexpr const _Head&
       14 ( 0.00%)        _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
        .           
        .                 _Head _M_head_impl;
        .               };
        .           
        .             /**
        .              * Contains the actual implementation of the @c tuple template, stored
        .              * as a recursive inheritance hierarchy from the first element (most
        .              * derived class) to the last (least derived class). The @c Idx
-- line 244 ----------------------------------------
-- line 260 ----------------------------------------
        .                 private _Head_base<_Idx, _Head>
        .               {
        .                 template<size_t, typename...> friend struct _Tuple_impl;
        .           
        .                 typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
        .                 typedef _Head_base<_Idx, _Head> _Base;
        .           
        .                 static constexpr _Head&
1,100,040 ( 0.09%)        _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  350,000 ( 0.03%)  => /usr/include/c++/11/tuple:std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) (50,000x)
        .           
        .                 static constexpr const _Head&
       20 ( 0.00%)        _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
       14 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Head_base<0ul, MSTSolver*, false>::_M_head(std::_Head_base<0ul, MSTSolver*, false> const&) (2x)
        .           
        .                 static constexpr _Inherited&
        .                 _M_tail(_Tuple_impl& __t) noexcept { return __t; }
        .           
        .                 static constexpr const _Inherited&
        .                 _M_tail(const _Tuple_impl& __t) noexcept { return __t; }
        .           
       10 ( 0.00%)        constexpr _Tuple_impl()
       18 ( 0.00%)        : _Inherited(), _Base() { }
       36 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, std::default_delete<MSTSolver> >::_Tuple_impl() (2x)
       18 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Head_base<0ul, MSTSolver*, false>::_Head_base() (2x)
        .           
        .                 explicit constexpr
        .                 _Tuple_impl(const _Head& __head, const _Tail&... __tail)
        .                 : _Inherited(__tail...), _Base(__head)
        .                 { }
        .           
        .                 template<typename _UHead, typename... _UTail,
        .           	       typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>
        .           	explicit constexpr
1,799,982 ( 0.14%)  	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
        .           	: _Inherited(std::forward<_UTail>(__tail)...),
3,499,965 ( 0.28%)  	  _Base(std::forward<_UHead>(__head))
10,999,780 ( 0.88%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, int, int>::_Tuple_impl<int&, int&, void>(int&, int&) (99,998x)
2,199,956 ( 0.18%)  => /usr/include/c++/11/tuple:std::_Head_base<0ul, int, false>::_Head_base<int&>(int&) (99,998x)
2,099,958 ( 0.17%)  => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (299,994x)
  999,990 ( 0.08%)  	{ }
        .           
        .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
        .           
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 2729. Missing SFINAE on std::pair::operator=
        .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
        .           
1,800,000 ( 0.14%)        _Tuple_impl(_Tuple_impl&&) = default;
  600,000 ( 0.05%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<2ul, int>::_Tuple_impl(std::_Tuple_impl<2ul, int>&&) (50,000x)
        .           
        .                 template<typename... _UElements>
        .           	constexpr
        .           	_Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
        .           	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
        .           	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))
        .           	{ }
        .           
-- line 309 ----------------------------------------
-- line 416 ----------------------------------------
        .               struct _Tuple_impl<_Idx, _Head>
        .               : private _Head_base<_Idx, _Head>
        .               {
        .                 template<size_t, typename...> friend struct _Tuple_impl;
        .           
        .                 typedef _Head_base<_Idx, _Head> _Base;
        .           
        .                 static constexpr _Head&
  500,020 ( 0.04%)        _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
       14 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Head_base<1ul, std::default_delete<MSTSolver>, true>::_M_head(std::_Head_base<1ul, std::default_delete<MSTSolver>, true>&) (2x)
        .           
        .                 static constexpr const _Head&
        .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
        .           
        .                 constexpr
       10 ( 0.00%)        _Tuple_impl()
       12 ( 0.00%)        : _Base() { }
       14 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Head_base<1ul, std::default_delete<MSTSolver>, true>::_Head_base() (2x)
        .           
        .                 explicit constexpr
        .                 _Tuple_impl(const _Head& __head)
        .                 : _Base(__head)
        .                 { }
        .           
        .                 template<typename _UHead>
        .           	explicit constexpr
  699,993 ( 0.06%)  	_Tuple_impl(_UHead&& __head)
  699,993 ( 0.06%)  	: _Base(std::forward<_UHead>(__head))
       22 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Head_base<2ul, int, false>::_Head_base<int>(int&&) (1x)
        7 ( 0.00%)  => /usr/include/c++/11/bits/move.h:int&& std::forward<int>(std::remove_reference<int>::type&) (1x)
  399,996 ( 0.03%)  	{ }
        .           
        .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
        .           
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 2729. Missing SFINAE on std::pair::operator=
        .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
        .           
        .           #if _GLIBCXX_INLINE_VERSION
        .                 _Tuple_impl(_Tuple_impl&&) = default;
        .           #else
        .                 constexpr
  250,000 ( 0.02%)        _Tuple_impl(_Tuple_impl&& __in)
        .                 noexcept(is_nothrow_move_constructible<_Head>::value)
  200,000 ( 0.02%)        : _Base(static_cast<_Base&&>(__in))
  150,000 ( 0.01%)        { }
        .           #endif
        .           
        .                 template<typename _UHead>
        .           	constexpr
        .           	_Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
        .           	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
        .           	{ }
        .           
-- line 465 ----------------------------------------
-- line 734 ----------------------------------------
        .           	tuple(const _Elements&... __elements)
        .           	noexcept(__nothrow_constructible<const _Elements&...>())
        .           	: _Inherited(__elements...) { }
        .           
        .                 template<typename... _UElements,
        .           	       bool _Valid = __valid_args<_UElements...>(),
        .           	       _ImplicitCtor<_Valid, _UElements...> = true>
        .           	constexpr
1,099,989 ( 0.09%)  	tuple(_UElements&&... __elements)
        .           	noexcept(__nothrow_constructible<_UElements...>())
2,399,976 ( 0.19%)  	: _Inherited(std::forward<_UElements>(__elements)...) { }
      189 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int, int, int>::_Tuple_impl<int, int, int, void>(int&&, int&&, int&&) (1x)
       21 ( 0.00%)  => /usr/include/c++/11/bits/move.h:int&& std::forward<int>(std::remove_reference<int>::type&) (3x)
        .           
        .                 template<typename... _UElements,
        .           	       bool _Valid = __valid_args<_UElements...>(),
        .           	       _ExplicitCtor<_Valid, _UElements...> = false>
        .           	explicit constexpr
        .           	tuple(_UElements&&... __elements)
        .           	noexcept(__nothrow_constructible<_UElements...>())
        .           	: _Inherited(std::forward<_UElements>(__elements)...) {	}
        .           
        .                 constexpr tuple(const tuple&) = default;
        .           
  700,000 ( 0.06%)        constexpr tuple(tuple&&) = default;
2,400,000 ( 0.19%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int, int, int>::_Tuple_impl(std::_Tuple_impl<0ul, int, int, int>&&) (50,000x)
        .           
        .                 template<typename... _UElements,
        .           	       bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        .           			   && !__use_other_ctor<const tuple<_UElements...>&>(),
        .           	       _ImplicitCtor<_Valid, const _UElements&...> = true>
        .           	constexpr
        .           	tuple(const tuple<_UElements...>& __in)
        .           	noexcept(__nothrow_constructible<const _UElements&...>())
-- line 764 ----------------------------------------
-- line 1041 ----------------------------------------
        .                 template<typename _U1>
        .           	static constexpr bool __is_alloc_arg()
        .           	{ return is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value; }
        .           
        .               public:
        .                 template<bool _Dummy = true,
        .           	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
        .           	constexpr
       10 ( 0.00%)  	tuple()
        .           	noexcept(__nothrow_default_constructible())
       12 ( 0.00%)  	: _Inherited() { }
       82 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, MSTSolver*, std::default_delete<MSTSolver> >::_Tuple_impl() (2x)
        .           
        .                 template<bool _Dummy = true,
        .           	       _ExplicitDefaultCtor<_Dummy, _T1, _T2> = false>
        .           	explicit constexpr
        .           	tuple()
        .           	noexcept(__nothrow_default_constructible())
        .           	: _Inherited() { }
        .           
-- line 1059 ----------------------------------------
-- line 1369 ----------------------------------------
        .               struct tuple_element<__i, tuple<>>
        .               {
        .                 static_assert(__i < tuple_size<tuple<>>::value,
        .           	  "tuple index must be in range");
        .               };
        .           
        .             template<size_t __i, typename _Head, typename... _Tail>
        .               constexpr _Head&
  750,030 ( 0.06%)      __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  750,030 ( 0.06%)      { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  900,000 ( 0.07%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, int, int>::_M_head(std::_Tuple_impl<1ul, int, int>&) (50,000x)
        .           
        .             template<size_t __i, typename _Head, typename... _Tail>
        .               constexpr const _Head&
       10 ( 0.00%)      __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
       10 ( 0.00%)      { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
       34 ( 0.00%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, MSTSolver*, std::default_delete<MSTSolver> >::_M_head(std::_Tuple_impl<0ul, MSTSolver*, std::default_delete<MSTSolver> > const&) (2x)
        .           
        .             // Deleted overload to improve diagnostics for invalid indices
        .             template<size_t __i, typename... _Types>
        .               __enable_if_t<(__i >= sizeof...(_Types))>
        .               __get_helper(const tuple<_Types...>&) = delete;
        .           
        .             /// Return a reference to the ith element of a tuple.
        .             template<size_t __i, typename... _Elements>
        .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&
       30 ( 0.00%)      get(tuple<_Elements...>& __t) noexcept
       30 ( 0.00%)      { return std::__get_helper<__i>(__t); }
      108 ( 0.00%)  => /usr/include/c++/11/tuple:MSTSolver*& std::__get_helper<0ul, MSTSolver*, std::default_delete<MSTSolver> >(std::_Tuple_impl<0ul, MSTSolver*, std::default_delete<MSTSolver> >&) (4x)
        .           
        .             /// Return a const reference to the ith element of a const tuple.
        .             template<size_t __i, typename... _Elements>
        .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
       10 ( 0.00%)      get(const tuple<_Elements...>& __t) noexcept
       10 ( 0.00%)      { return std::__get_helper<__i>(__t); }
       54 ( 0.00%)  => /usr/include/c++/11/tuple:MSTSolver* const& std::__get_helper<0ul, MSTSolver*, std::default_delete<MSTSolver> >(std::_Tuple_impl<0ul, MSTSolver*, std::default_delete<MSTSolver> > const&) (2x)
        .           
        .             /// Return an rvalue reference to the ith element of a tuple rvalue.
        .             template<size_t __i, typename... _Elements>
        .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
  750,000 ( 0.06%)      get(tuple<_Elements...>&& __t) noexcept
        .               {
        .                 typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
  750,000 ( 0.06%)        return std::forward<__element_type>(std::__get_helper<__i>(__t));
1,400,000 ( 0.11%)  => /usr/include/c++/11/tuple:int& std::__get_helper<1ul, int, int>(std::_Tuple_impl<1ul, int, int>&) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:int&& std::forward<int>(std::remove_reference<int>::type&) (50,000x)
  300,000 ( 0.02%)      }
        .           
        .             /// Return a const rvalue reference to the ith element of a const tuple rvalue.
        .             template<size_t __i, typename... _Elements>
        .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
        .               get(const tuple<_Elements...>&& __t) noexcept
        .               {
        .                 typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
        .                 return std::forward<const __element_type>(std::__get_helper<__i>(__t));
-- line 1417 ----------------------------------------
-- line 1597 ----------------------------------------
        .               operator>=(const tuple<_TElements...>& __t,
        .           	       const tuple<_UElements...>& __u)
        .               { return !(__t < __u); }
        .           #endif // three_way_comparison
        .           
        .             // NB: DR 705.
        .             template<typename... _Elements>
        .               constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
       10 ( 0.00%)      make_tuple(_Elements&&... __args)
        .               {
        .                 typedef tuple<typename __decay_and_strip<_Elements>::__type...>
        .           	__result_type;
       17 ( 0.00%)        return __result_type(std::forward<_Elements>(__args)...);
      245 ( 0.00%)  => /usr/include/c++/11/tuple:std::tuple<int, int, int>::tuple<int, int, int, true, true>(int&&, int&&, int&&) (1x)
       21 ( 0.00%)  => /usr/include/c++/11/bits/move.h:int&& std::forward<int>(std::remove_reference<int>::type&) (3x)
        6 ( 0.00%)      }
        .           
        .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .             // 2275. Why is forward_as_tuple not constexpr?
        .             /// std::forward_as_tuple
        .             template<typename... _Elements>
        .               constexpr tuple<_Elements&&...>
        .               forward_as_tuple(_Elements&&... __args) noexcept
        .               { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
-- line 1618 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_pair.h
--------------------------------------------------------------------------------
Ir                 

-- line 344 ----------------------------------------
        .                  : first(__x), second(std::forward<_U2>(__y)) { }
        .           
        .                 template<typename _U1, typename _U2, typename
        .           	       enable_if<_PCCP::template
        .           			   _MoveConstructiblePair<_U1, _U2>()
        .           			  && _PCCP::template
        .           			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
        .                                    bool>::type=true>
1,449,993 ( 0.12%)  	constexpr pair(_U1&& __x, _U2&& __y)
3,099,985 ( 0.25%)  	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
  600,000 ( 0.05%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_Rb_tree_const_iterator(std::_Rb_tree_iterator<std::tuple<int, int, int> > const&) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >& std::forward<std::_Rb_tree_iterator<std::tuple<int, int, int> >&>(std::remove_reference<std::_Rb_tree_iterator<std::tuple<int, int, int> >&>::type&) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:bool& std::forward<bool&>(std::remove_reference<bool&>::type&) (50,000x)
        .           
        .                 template<typename _U1, typename _U2, typename
        .           	       enable_if<_PCCP::template
        .           			   _MoveConstructiblePair<_U1, _U2>()
        .           			  && !_PCCP::template
        .           			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
        .                                    bool>::type=false>
        .           	explicit constexpr pair(_U1&& __x, _U2&& __y)
-- line 361 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/alloc_traits.h
--------------------------------------------------------------------------------
Ir               

-- line 89 ----------------------------------------
      .               // overload destroy for non-standard pointer types
      .               template<typename _Ptr>
      .                 static _GLIBCXX14_CONSTEXPR
      .                 std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      .                 destroy(_Alloc& __a, _Ptr __p)
      .                 noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      .                 { _Base_type::destroy(__a, std::__to_address(__p)); }
      .           
450,000 ( 0.04%)      static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
550,000 ( 0.04%)      { return _Base_type::select_on_container_copy_construction(__a); }
1,800,000 ( 0.14%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<Edge> >::select_on_container_copy_construction(std::allocator<Edge> const&) (50,000x)
      .           
      .               static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
      .               { std::__alloc_on_swap(__a, __b); }
      .           
      .               static constexpr bool _S_propagate_on_copy_assign()
      .               { return _Base_type::propagate_on_container_copy_assignment::value; }
      .           
      .               static constexpr bool _S_propagate_on_move_assign()
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_tree.h
--------------------------------------------------------------------------------
Ir                 

-- line 138 ----------------------------------------
        .             };
        .           
        .             // Helper type offering value initialization guarantee on the compare functor.
        .             template<typename _Key_compare>
        .               struct _Rb_tree_key_compare
        .               {
        .                 _Key_compare		_M_key_compare;
        .           
        4 ( 0.00%)        _Rb_tree_key_compare()
        .                 _GLIBCXX_NOEXCEPT_IF(
        .           	is_nothrow_default_constructible<_Key_compare>::value)
        .                 : _M_key_compare()
        3 ( 0.00%)        { }
        .           
        .                 _Rb_tree_key_compare(const _Key_compare& __comp)
        .                 : _M_key_compare(__comp)
        .                 { }
        .           
        .           #if __cplusplus >= 201103L
        .                 // Copy constructor added for consistency with C++98 mode.
        .                 _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;
-- line 158 ----------------------------------------
-- line 165 ----------------------------------------
        .               };
        .           
        .             // Helper type to manage default initialization of node count and header.
        .             struct _Rb_tree_header
        .             {
        .               _Rb_tree_node_base	_M_header;
        .               size_t		_M_node_count; // Keeps track of size of tree.
        .           
        5 ( 0.00%)      _Rb_tree_header() _GLIBCXX_NOEXCEPT
        .               {
        2 ( 0.00%)        _M_header._M_color = _S_red;
        3 ( 0.00%)        _M_reset();
       17 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_header::_M_reset() (1x)
        3 ( 0.00%)      }
        .           
        .           #if __cplusplus >= 201103L
        .               _Rb_tree_header(_Rb_tree_header&& __x) noexcept
        .               {
        .                 if (__x._M_header._M_parent != nullptr)
        .           	_M_move_data(__x);
        .                 else
        .           	{
-- line 185 ----------------------------------------
-- line 198 ----------------------------------------
        .                 _M_header._M_right = __from._M_header._M_right;
        .                 _M_header._M_parent->_M_parent = &_M_header;
        .                 _M_node_count = __from._M_node_count;
        .           
        .                 __from._M_reset();
        .               }
        .           
        .               void
  200,000 ( 0.02%)      _M_reset()
        .               {
  100,000 ( 0.01%)        _M_header._M_parent = 0;
  150,000 ( 0.01%)        _M_header._M_left = &_M_header;
  150,000 ( 0.01%)        _M_header._M_right = &_M_header;
  100,000 ( 0.01%)        _M_node_count = 0;
  150,000 ( 0.01%)      }
        .             };
        .           
        .             template<typename _Val>
        .               struct _Rb_tree_node : public _Rb_tree_node_base
        .               {
        .                 typedef _Rb_tree_node<_Val>* _Link_type;
        .           
        .           #if __cplusplus < 201103L
-- line 220 ----------------------------------------
-- line 226 ----------------------------------------
        .           
        .                 const _Val*
        .                 _M_valptr() const
        .                 { return std::__addressof(_M_value_field); }
        .           #else
        .                 __gnu_cxx::__aligned_membuf<_Val> _M_storage;
        .           
        .                 _Val*
  500,000 ( 0.04%)        _M_valptr()
  600,000 ( 0.05%)        { return _M_storage._M_ptr(); }
1,700,000 ( 0.14%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<std::tuple<int, int, int> >::_M_ptr() (100,000x)
        .           
        .                 const _Val*
  250,000 ( 0.02%)        _M_valptr() const
  300,000 ( 0.02%)        { return _M_storage._M_ptr(); }
  850,000 ( 0.07%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<std::tuple<int, int, int> >::_M_ptr() const (50,000x)
        .           #endif
        .               };
        .           
        .             _GLIBCXX_PURE _Rb_tree_node_base*
        .             _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();
        .           
        .             _GLIBCXX_PURE const _Rb_tree_node_base*
        .             _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();
-- line 247 ----------------------------------------
-- line 265 ----------------------------------------
        .                 typedef _Rb_tree_iterator<_Tp>		_Self;
        .                 typedef _Rb_tree_node_base::_Base_ptr	_Base_ptr;
        .                 typedef _Rb_tree_node<_Tp>*		_Link_type;
        .           
        .                 _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
        .                 : _M_node() { }
        .           
        .                 explicit
1,999,980 ( 0.16%)        _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
2,399,976 ( 0.19%)        : _M_node(__x) { }
        .           
        .                 reference
        .                 operator*() const _GLIBCXX_NOEXCEPT
        .                 { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
        .           
        .                 pointer
        .                 operator->() const _GLIBCXX_NOEXCEPT
        .                 { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
-- line 282 ----------------------------------------
-- line 307 ----------------------------------------
        .                 operator--(int) _GLIBCXX_NOEXCEPT
        .                 {
        .           	_Self __tmp = *this;
        .           	_M_node = _Rb_tree_decrement(_M_node);
        .           	return __tmp;
        .                 }
        .           
        .                 friend bool
  250,000 ( 0.02%)        operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
  400,000 ( 0.03%)        { return __x._M_node == __y._M_node; }
        .           
        .           #if ! __cpp_lib_three_way_comparison
        .                 friend bool
        .                 operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        .                 { return __x._M_node != __y._M_node; }
        .           #endif
        .           
        .                 _Base_ptr _M_node;
-- line 324 ----------------------------------------
-- line 339 ----------------------------------------
        .                 typedef _Rb_tree_const_iterator<_Tp>		_Self;
        .                 typedef _Rb_tree_node_base::_Const_Base_ptr	_Base_ptr;
        .                 typedef const _Rb_tree_node<_Tp>*			_Link_type;
        .           
        .                 _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT
        .                 : _M_node() { }
        .           
        .                 explicit
  500,000 ( 0.04%)        _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
  600,000 ( 0.05%)        : _M_node(__x) { }
        .           
1,499,980 ( 0.12%)        _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
2,099,972 ( 0.17%)        : _M_node(__it._M_node) { }
        .           
        .                 iterator
  400,000 ( 0.03%)        _M_const_cast() const _GLIBCXX_NOEXCEPT
  600,000 ( 0.05%)        { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
  550,000 ( 0.04%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >::_Rb_tree_iterator(std::_Rb_tree_node_base*) (50,000x)
        .           
        .                 reference
  250,000 ( 0.02%)        operator*() const _GLIBCXX_NOEXCEPT
  300,000 ( 0.02%)        { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
1,400,000 ( 0.11%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >::_M_valptr() const (50,000x)
        .           
        .                 pointer
        .                 operator->() const _GLIBCXX_NOEXCEPT
        .                 { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
        .           
        .                 _Self&
  250,000 ( 0.02%)        operator++() _GLIBCXX_NOEXCEPT
        .                 {
  300,000 ( 0.02%)  	_M_node = _Rb_tree_increment(_M_node);
  900,000 ( 0.07%)  => ???:0x000000000010b590 (50,000x)
   50,000 ( 0.00%)  	return *this;
  100,000 ( 0.01%)        }
        .           
        .                 _Self
        .                 operator++(int) _GLIBCXX_NOEXCEPT
        .                 {
        .           	_Self __tmp = *this;
        .           	_M_node = _Rb_tree_increment(_M_node);
        .           	return __tmp;
        .                 }
-- line 378 ----------------------------------------
-- line 388 ----------------------------------------
        .                 operator--(int) _GLIBCXX_NOEXCEPT
        .                 {
        .           	_Self __tmp = *this;
        .           	_M_node = _Rb_tree_decrement(_M_node);
        .           	return __tmp;
        .                 }
        .           
        .                 friend bool
  499,990 ( 0.04%)        operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
  799,984 ( 0.06%)        { return __x._M_node == __y._M_node; }
        .           
        .           #if ! __cpp_lib_three_way_comparison
        .                 friend bool
        .                 operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        .                 { return __x._M_node != __y._M_node; }
        .           #endif
        .           
        .                 _Base_ptr _M_node;
-- line 405 ----------------------------------------
-- line 515 ----------------------------------------
        .           	_Base_ptr _M_nodes;
        .           	_Rb_tree& _M_t;
        .                 };
        .           
        .                 // Functor similar to the previous one but without any pool of nodes to
        .                 // recycle.
        .                 struct _Alloc_node
        .                 {
  250,000 ( 0.02%)  	_Alloc_node(_Rb_tree& __t)
  300,000 ( 0.02%)  	: _M_t(__t) { }
        .           
        .           	template<typename _Arg>
        .           	  _Link_type
  350,000 ( 0.03%)  	  operator()(_GLIBCXX_FWDREF(_Arg) __arg) const
  550,000 ( 0.04%)  	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
18,300,288 ( 1.46%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >* std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_create_node<std::tuple<int, int, int> >(std::tuple<int, int, int>&&) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::tuple<int, int, int>&& std::forward<std::tuple<int, int, int> >(std::remove_reference<std::tuple<int, int, int> >::type&) (50,000x)
        .           
        .                 private:
        .           	_Rb_tree& _M_t;
        .                 };
        .           
        .               public:
        .                 typedef _Key 				key_type;
        .                 typedef _Val 				value_type;
-- line 537 ----------------------------------------
-- line 539 ----------------------------------------
        .                 typedef const value_type* 		const_pointer;
        .                 typedef value_type& 			reference;
        .                 typedef const value_type& 		const_reference;
        .                 typedef size_t 				size_type;
        .                 typedef ptrdiff_t 			difference_type;
        .                 typedef _Alloc 				allocator_type;
        .           
        .                 _Node_allocator&
  800,000 ( 0.06%)        _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
  600,000 ( 0.05%)        { return this->_M_impl; }
        .           
        .                 const _Node_allocator&
        .                 _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
        .                 { return this->_M_impl; }
        .           
        .                 allocator_type
        .                 get_allocator() const _GLIBCXX_NOEXCEPT
        .                 { return allocator_type(_M_get_Node_allocator()); }
        .           
        .               protected:
        .                 _Link_type
  250,000 ( 0.02%)        _M_get_node()
  400,000 ( 0.03%)        { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
5,350,288 ( 0.43%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > > >::allocate(std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >&, unsigned long) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_Node_allocator() (50,000x)
        .           
        .                 void
  300,000 ( 0.02%)        _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
  600,000 ( 0.05%)        { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
6,700,000 ( 0.53%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > > >::deallocate(std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >&, std::_Rb_tree_node<std::tuple<int, int, int> >*, unsigned long) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_Node_allocator() (50,000x)
        .           
        .           #if __cplusplus < 201103L
        .                 void
        .                 _M_construct_node(_Link_type __node, const value_type& __x)
        .                 {
        .           	__try
        .           	  { get_allocator().construct(__node->_M_valptr(), __x); }
        .           	__catch(...)
-- line 573 ----------------------------------------
-- line 582 ----------------------------------------
        .                 {
        .           	_Link_type __tmp = _M_get_node();
        .           	_M_construct_node(__tmp, __x);
        .           	return __tmp;
        .                 }
        .           #else
        .                 template<typename... _Args>
        .           	void
  450,000 ( 0.04%)  	_M_construct_node(_Link_type __node, _Args&&... __args)
        .           	{
        .           	  __try
        .           	    {
  200,000 ( 0.02%)  	      ::new(__node) _Rb_tree_node<_Val>;
  400,000 ( 0.03%)  => /usr/include/c++/11/new:operator new(unsigned long, void*) (50,000x)
  750,000 ( 0.06%)  	      _Alloc_traits::construct(_M_get_Node_allocator(),
6,300,000 ( 0.50%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > > >::construct<std::tuple<int, int, int>, std::tuple<int, int, int> >(std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >&, std::tuple<int, int, int>*, std::tuple<int, int, int>&&) (50,000x)
1,400,000 ( 0.11%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >::_M_valptr() (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::tuple<int, int, int>&& std::forward<std::tuple<int, int, int> >(std::remove_reference<std::tuple<int, int, int> >::type&) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_Node_allocator() (50,000x)
        .           				       __node->_M_valptr(),
        .           				       std::forward<_Args>(__args)...);
        .           	    }
        .           	  __catch(...)
        .           	    {
        .           	      __node->~_Rb_tree_node<_Val>();
        .           	      _M_put_node(__node);
        .           	      __throw_exception_again;
        .           	    }
  300,000 ( 0.02%)  	}
        .           
        .                 template<typename... _Args>
        .           	_Link_type
  300,000 ( 0.02%)  	_M_create_node(_Args&&... __args)
        .           	{
  200,000 ( 0.02%)  	  _Link_type __tmp = _M_get_node();
6,350,288 ( 0.51%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_node() (50,000x)
  450,000 ( 0.04%)  	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
10,500,000 ( 0.84%)  => /usr/include/c++/11/bits/stl_tree.h:void std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_construct_node<std::tuple<int, int, int> >(std::_Rb_tree_node<std::tuple<int, int, int> >*, std::tuple<int, int, int>&&) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::tuple<int, int, int>&& std::forward<std::tuple<int, int, int> >(std::remove_reference<std::tuple<int, int, int> >::type&) (50,000x)
   50,000 ( 0.00%)  	  return __tmp;
  100,000 ( 0.01%)  	}
        .           #endif
        .           
        .                 void
  350,000 ( 0.03%)        _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        .                 {
        .           #if __cplusplus < 201103L
        .           	get_allocator().destroy(__p->_M_valptr());
        .           #else
  500,000 ( 0.04%)  	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
1,400,000 ( 0.11%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >::_M_valptr() (50,000x)
1,100,000 ( 0.09%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > > >::destroy<std::tuple<int, int, int> >(std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >&, std::tuple<int, int, int>*) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_Node_allocator() (50,000x)
        .           	__p->~_Rb_tree_node<_Val>();
        .           #endif
  200,000 ( 0.02%)        }
        .           
        .                 void
  300,000 ( 0.02%)        _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        .                 {
  250,000 ( 0.02%)  	_M_destroy_node(__p);
3,900,000 ( 0.31%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_destroy_node(std::_Rb_tree_node<std::tuple<int, int, int> >*) (50,000x)
  250,000 ( 0.02%)  	_M_put_node(__p);
7,950,000 ( 0.63%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_put_node(std::_Rb_tree_node<std::tuple<int, int, int> >*) (50,000x)
  150,000 ( 0.01%)        }
        .           
        .                 template<bool _MoveValue, typename _NodeGen>
        .           	_Link_type
        .           	_M_clone_node(_Link_type __x, _NodeGen& __node_gen)
        .           	{
        .           #if __cplusplus >= 201103L
        .           	  using _Vp = typename conditional<_MoveValue,
        .           					   value_type&&,
-- line 641 ----------------------------------------
-- line 652 ----------------------------------------
        .               protected:
        .           #if _GLIBCXX_INLINE_VERSION
        .                 template<typename _Key_compare>
        .           #else
        .                 // Unused _Is_pod_comparator is kept as it is part of mangled name.
        .                 template<typename _Key_compare,
        .           	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
        .           #endif
       11 ( 0.00%)  	struct _Rb_tree_impl
       18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::~allocator() (1x)
        .           	: public _Node_allocator
        .           	, public _Rb_tree_key_compare<_Key_compare>
        .           	, public _Rb_tree_header
        .           	{
        .           	  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;
        .           
        5 ( 0.00%)  	  _Rb_tree_impl()
        .           	    _GLIBCXX_NOEXCEPT_IF(
        .           		is_nothrow_default_constructible<_Node_allocator>::value
        .           		&& is_nothrow_default_constructible<_Base_key_compare>::value )
       10 ( 0.00%)  	  : _Node_allocator()
       30 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_header::_Rb_tree_header() (1x)
       18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::allocator() (1x)
        7 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_key_compare<std::less<std::tuple<int, int, int> > >::_Rb_tree_key_compare() (1x)
        3 ( 0.00%)  	  { }
        .           
        .           	  _Rb_tree_impl(const _Rb_tree_impl& __x)
        .           	  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
        .           	  , _Base_key_compare(__x._M_key_compare)
        .           	  , _Rb_tree_header()
        .           	  { }
        .           
        .           #if __cplusplus < 201103L
-- line 680 ----------------------------------------
-- line 726 ----------------------------------------
        .                 _M_rightmost() _GLIBCXX_NOEXCEPT
        .                 { return this->_M_impl._M_header._M_right; }
        .           
        .                 _Const_Base_ptr
        .                 _M_rightmost() const _GLIBCXX_NOEXCEPT
        .                 { return this->_M_impl._M_header._M_right; }
        .           
        .                 _Link_type
  599,996 ( 0.05%)        _M_mbegin() const _GLIBCXX_NOEXCEPT
  599,996 ( 0.05%)        { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
        .           
        .                 _Link_type
  749,995 ( 0.06%)        _M_begin() _GLIBCXX_NOEXCEPT
  749,995 ( 0.06%)        { return _M_mbegin(); }
1,199,992 ( 0.10%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_mbegin() const (149,999x)
        .           
        .                 _Const_Link_type
        .                 _M_begin() const _GLIBCXX_NOEXCEPT
        .                 {
        .           	return static_cast<_Const_Link_type>
        .           	  (this->_M_impl._M_header._M_parent);
        .                 }
        .           
        .                 _Base_ptr
  599,996 ( 0.05%)        _M_end() _GLIBCXX_NOEXCEPT
  599,996 ( 0.05%)        { return &this->_M_impl._M_header; }
        .           
        .                 _Const_Base_ptr
        .                 _M_end() const _GLIBCXX_NOEXCEPT
        .                 { return &this->_M_impl._M_header; }
        .           
        .                 static const _Key&
        .                 _S_key(_Const_Link_type __x)
        .                 {
-- line 758 ----------------------------------------
-- line 920 ----------------------------------------
        .                 _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        .           		     const _Key& __k) const;
        .           
        .               public:
        .                 // allocation/deallocation
        .           #if __cplusplus < 201103L
        .                 _Rb_tree() { }
        .           #else
       11 ( 0.00%)        _Rb_tree() = default;
       73 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Rb_tree_impl<std::less<std::tuple<int, int, int> >, true>::_Rb_tree_impl() (1x)
        .           #endif
        .           
        .                 _Rb_tree(const _Compare& __comp,
        .           	       const allocator_type& __a = allocator_type())
        .                 : _M_impl(__comp, _Node_allocator(__a)) { }
        .           
        .                 _Rb_tree(const _Rb_tree& __x)
        .                 : _M_impl(__x._M_impl)
-- line 936 ----------------------------------------
-- line 975 ----------------------------------------
        .                 noexcept( noexcept(
        .           	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
        .           		 std::declval<typename _Alloc_traits::is_always_equal>())) )
        .                 : _Rb_tree(std::move(__x), std::move(__a),
        .           		 typename _Alloc_traits::is_always_equal{})
        .                 { }
        .           #endif
        .           
        5 ( 0.00%)        ~_Rb_tree() _GLIBCXX_NOEXCEPT
       14 ( 0.00%)        { _M_erase(_M_begin()); }
       29 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Rb_tree_impl<std::less<std::tuple<int, int, int> >, true>::~_Rb_tree_impl() (1x)
       18 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_begin() (1x)
       13 ( 0.00%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_erase(std::_Rb_tree_node<std::tuple<int, int, int> >*) (1x)
        .           
        .                 _Rb_tree&
        .                 operator=(const _Rb_tree& __x);
        .           
        .                 // Accessors.
        .                 _Compare
        .                 key_comp() const
        .                 { return _M_impl._M_key_compare; }
        .           
        .                 iterator
  799,992 ( 0.06%)        begin() _GLIBCXX_NOEXCEPT
1,199,988 ( 0.10%)        { return iterator(this->_M_impl._M_header._M_left); }
1,099,989 ( 0.09%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >::_Rb_tree_iterator(std::_Rb_tree_node_base*) (99,999x)
        .           
        .                 const_iterator
  800,000 ( 0.06%)        begin() const _GLIBCXX_NOEXCEPT
1,200,000 ( 0.10%)        { return const_iterator(this->_M_impl._M_header._M_left); }
1,100,000 ( 0.09%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_Rb_tree_const_iterator(std::_Rb_tree_node_base const*) (100,000x)
        .           
        .                 iterator
  399,992 ( 0.03%)        end() _GLIBCXX_NOEXCEPT
  599,988 ( 0.05%)        { return iterator(&this->_M_impl._M_header); }
  549,989 ( 0.04%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >::_Rb_tree_iterator(std::_Rb_tree_node_base*) (49,999x)
        .           
        .                 const_iterator
        .                 end() const _GLIBCXX_NOEXCEPT
        .                 { return const_iterator(&this->_M_impl._M_header); }
        .           
        .                 reverse_iterator
        .                 rbegin() _GLIBCXX_NOEXCEPT
        .                 { return reverse_iterator(end()); }
-- line 1012 ----------------------------------------
-- line 1019 ----------------------------------------
        .                 rend() _GLIBCXX_NOEXCEPT
        .                 { return reverse_iterator(begin()); }
        .           
        .                 const_reverse_iterator
        .                 rend() const _GLIBCXX_NOEXCEPT
        .                 { return const_reverse_iterator(begin()); }
        .           
        .                 _GLIBCXX_NODISCARD bool
  200,004 ( 0.02%)        empty() const _GLIBCXX_NOEXCEPT
  300,006 ( 0.02%)        { return _M_impl._M_node_count == 0; }
        .           
        .                 size_type
  399,992 ( 0.03%)        size() const _GLIBCXX_NOEXCEPT
  399,992 ( 0.03%)        { return _M_impl._M_node_count; }
        .           
        .                 size_type
        .                 max_size() const _GLIBCXX_NOEXCEPT
        .                 { return _Alloc_traits::max_size(_M_get_Node_allocator()); }
        .           
        .                 void
        .                 swap(_Rb_tree& __t)
        .                 _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value);
-- line 1040 ----------------------------------------
-- line 1184 ----------------------------------------
        .                 _M_erase_aux(const_iterator __first, const_iterator __last);
        .           
        .               public:
        .           #if __cplusplus >= 201103L
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // DR 130. Associative erase should return an iterator.
        .                 _GLIBCXX_ABI_TAG_CXX11
        .                 iterator
  450,000 ( 0.04%)        erase(const_iterator __position)
        .                 {
  100,000 ( 0.01%)  	__glibcxx_assert(__position != end());
  100,000 ( 0.01%)  	const_iterator __result = __position;
  150,000 ( 0.01%)  	++__result;
1,600,000 ( 0.13%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::operator++() (50,000x)
  250,000 ( 0.02%)  	_M_erase_aux(__position);
16,350,000 ( 1.30%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_erase_aux(std::_Rb_tree_const_iterator<std::tuple<int, int, int> >) (50,000x)
  150,000 ( 0.01%)  	return __result._M_const_cast();
1,550,000 ( 0.12%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_M_const_cast() const (50,000x)
  250,000 ( 0.02%)        }
        .           
        .                 // LWG 2059.
        .                 _GLIBCXX_ABI_TAG_CXX11
        .                 iterator
        .                 erase(iterator __position)
        .                 {
        .           	__glibcxx_assert(__position != end());
        .           	iterator __result = __position;
-- line 1207 ----------------------------------------
-- line 1244 ----------------------------------------
        .                 { _M_erase_aux(__first, __last); }
        .           
        .                 void
        .                 erase(const_iterator __first, const_iterator __last)
        .                 { _M_erase_aux(__first, __last); }
        .           #endif
        .           
        .                 void
  249,995 ( 0.02%)        clear() _GLIBCXX_NOEXCEPT
        .                 {
  399,992 ( 0.03%)  	_M_erase(_M_begin());
  899,982 ( 0.07%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_begin() (49,999x)
  649,987 ( 0.05%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_erase(std::_Rb_tree_node<std::tuple<int, int, int> >*) (49,999x)
  199,996 ( 0.02%)  	_M_impl._M_reset();
  849,983 ( 0.07%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_header::_M_reset() (49,999x)
  149,997 ( 0.01%)        }
        .           
        .                 // Set operations.
        .                 iterator
        .                 find(const key_type& __k);
        .           
        .                 const_iterator
        .                 find(const key_type& __k) const;
        .           
-- line 1264 ----------------------------------------
-- line 1763 ----------------------------------------
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .           #if __cplusplus >= 201103L
        .               template<typename _Arg, typename _NodeGen>
        .           #else
        .               template<typename _NodeGen>
        .           #endif
        .                 typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
  700,000 ( 0.06%)        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .                 _M_insert_(_Base_ptr __x, _Base_ptr __p,
        .           #if __cplusplus >= 201103L
        .           		 _Arg&& __v,
        .           #else
        .           		 const _Val& __v,
        .           #endif
        .           		 _NodeGen& __node_gen)
        .                 {
  300,000 ( 0.02%)  	bool __insert_left = (__x != 0 || __p == _M_end()
  400,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_end() (50,000x)
  200,000 ( 0.02%)  			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
        .           							_S_key(__p)));
        .           
  450,000 ( 0.04%)  	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
19,550,288 ( 1.56%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_node<std::tuple<int, int, int> >* std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Alloc_node::operator()<std::tuple<int, int, int> >(std::tuple<int, int, int>&&) const (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::tuple<int, int, int>&& std::forward<std::tuple<int, int, int> >(std::remove_reference<std::tuple<int, int, int> >::type&) (50,000x)
        .           
  250,000 ( 0.02%)  	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  900,000 ( 0.07%)  => ???:0x000000000010b370 (50,000x)
  100,000 ( 0.01%)  				      this->_M_impl._M_header);
  250,000 ( 0.02%)  	++_M_impl._M_node_count;
  300,000 ( 0.02%)  	return iterator(__z);
  550,000 ( 0.04%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >::_Rb_tree_iterator(std::_Rb_tree_node_base*) (50,000x)
  400,000 ( 0.03%)        }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .           #if __cplusplus >= 201103L
        .               template<typename _Arg>
        .           #endif
        .               typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 1798 ----------------------------------------
-- line 1875 ----------------------------------------
        .           	    __throw_exception_again;
        .           	  }
        .           	return __top;
        .                 }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               void
  300,000 ( 0.02%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .               _M_erase(_Link_type __x)
        .               {
        .                 // Erase without rebalancing.
  150,000 ( 0.01%)        while (__x != 0)
        .           	{
        .           	  _M_erase(_S_right(__x));
        .           	  _Link_type __y = _S_left(__x);
        .           	  _M_drop_node(__x);
        .           	  __x = __y;
        .           	}
  200,000 ( 0.02%)      }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           		      _Compare, _Alloc>::iterator
        .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .               _M_lower_bound(_Link_type __x, _Base_ptr __y,
        .           		   const _Key& __k)
-- line 1902 ----------------------------------------
-- line 1958 ----------------------------------------
        .               }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::iterator,
        .           	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::iterator>
  499,990 ( 0.04%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .               equal_range(const _Key& __k)
        .               {
  199,996 ( 0.02%)        _Link_type __x = _M_begin();
  899,982 ( 0.07%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_begin() (49,999x)
  199,996 ( 0.02%)        _Base_ptr __y = _M_end();
  399,992 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_end() (49,999x)
  149,997 ( 0.01%)        while (__x != 0)
        .           	{
        .           	  if (_M_impl._M_key_compare(_S_key(__x), __k))
        .           	    __x = _S_right(__x);
        .           	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
        .           	    __y = __x, __x = _S_left(__x);
        .           	  else
        .           	    {
        .           	      _Link_type __xu(__x);
-- line 1979 ----------------------------------------
-- line 1980 ----------------------------------------
        .           	      _Base_ptr __yu(__y);
        .           	      __y = __x, __x = _S_left(__x);
        .           	      __xu = _S_right(__xu);
        .           	      return pair<iterator,
        .           			  iterator>(_M_lower_bound(__x, __y, __k),
        .           				    _M_upper_bound(__xu, __yu, __k));
        .           	    }
        .           	}
  549,989 ( 0.04%)        return pair<iterator, iterator>(iterator(__y),
1,799,964 ( 0.14%)  => /usr/include/c++/11/bits/stl_pair.h:std::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, std::_Rb_tree_iterator<std::tuple<int, int, int> > >::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, std::_Rb_tree_iterator<std::tuple<int, int, int> >, true>(std::_Rb_tree_iterator<std::tuple<int, int, int> >&&, std::_Rb_tree_iterator<std::tuple<int, int, int> >&&) (49,999x)
  549,989 ( 0.04%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >::_Rb_tree_iterator(std::_Rb_tree_node_base*) (49,999x)
  349,993 ( 0.03%)  				      iterator(__y));
  549,989 ( 0.04%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >::_Rb_tree_iterator(std::_Rb_tree_node_base*) (49,999x)
  299,994 ( 0.02%)      }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::const_iterator,
        .           	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::const_iterator>
        .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 1998 ----------------------------------------
-- line 2053 ----------------------------------------
        .               }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::_Base_ptr,
        .           	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::_Base_ptr>
  500,000 ( 0.04%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .               _M_get_insert_unique_pos(const key_type& __k)
        .               {
        .                 typedef pair<_Base_ptr, _Base_ptr> _Res;
  200,000 ( 0.02%)        _Link_type __x = _M_begin();
  900,000 ( 0.07%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_begin() (50,000x)
  200,000 ( 0.02%)        _Base_ptr __y = _M_end();
  400,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_end() (50,000x)
   50,000 ( 0.00%)        bool __comp = true;
  200,000 ( 0.02%)        while (__x != 0)
        .           	{
        .           	  __y = __x;
        .           	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
        .           	  __x = __comp ? _S_left(__x) : _S_right(__x);
        .           	}
  250,000 ( 0.02%)        iterator __j = iterator(__y);
  550,000 ( 0.04%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> >::_Rb_tree_iterator(std::_Rb_tree_node_base*) (50,000x)
  100,000 ( 0.01%)        if (__comp)
        .           	{
  550,000 ( 0.04%)  	  if (__j == begin())
1,550,000 ( 0.12%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::begin() (50,000x)
  650,000 ( 0.05%)  => /usr/include/c++/11/bits/stl_tree.h:std::operator==(std::_Rb_tree_iterator<std::tuple<int, int, int> > const&, std::_Rb_tree_iterator<std::tuple<int, int, int> > const&) (50,000x)
  450,000 ( 0.04%)  	    return _Res(__x, __y);
1,800,000 ( 0.14%)  => /usr/include/c++/11/bits/stl_pair.h:std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<std::tuple<int, int, int> >*&, std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node<std::tuple<int, int, int> >*&, std::_Rb_tree_node_base*&) (50,000x)
        .           	  else
        .           	    --__j;
        .           	}
        .                 if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
        .           	return _Res(__x, __y);
        .                 return _Res(__j._M_node, 0);
  300,000 ( 0.02%)      }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::_Base_ptr,
        .           	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::_Base_ptr>
        .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 2093 ----------------------------------------
-- line 2107 ----------------------------------------
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .           #if __cplusplus >= 201103L
        .               template<typename _Arg>
        .           #endif
        .               pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           			   _Compare, _Alloc>::iterator, bool>
  450,000 ( 0.04%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .           #if __cplusplus >= 201103L
        .               _M_insert_unique(_Arg&& __v)
        .           #else
        .               _M_insert_unique(const _Val& __v)
        .           #endif
        .               {
        .                 typedef pair<iterator, bool> _Res;
        .                 pair<_Base_ptr, _Base_ptr> __res
  600,000 ( 0.05%)  	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
8,650,000 ( 0.69%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_get_insert_unique_pos(std::tuple<int, int, int> const&) (50,000x)
  400,000 ( 0.03%)  => /usr/include/c++/11/bits/stl_function.h:std::_Identity<std::tuple<int, int, int> >::operator()(std::tuple<int, int, int>&) const (50,000x)
        .           
  150,000 ( 0.01%)        if (__res.second)
        .           	{
  250,000 ( 0.02%)  	  _Alloc_node __an(*this);
  550,000 ( 0.04%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Alloc_node::_Alloc_node(std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >&) (50,000x)
  950,000 ( 0.08%)  	  return _Res(_M_insert_(__res.first, __res.second,
24,700,288 ( 1.97%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_iterator<std::tuple<int, int, int> > std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_insert_<std::tuple<int, int, int>, std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::tuple<int, int, int>&&, std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_Alloc_node&) (50,000x)
1,800,000 ( 0.14%)  => /usr/include/c++/11/bits/stl_pair.h:std::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, bool>::pair<std::_Rb_tree_iterator<std::tuple<int, int, int> >, bool, true>(std::_Rb_tree_iterator<std::tuple<int, int, int> >&&, bool&&) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::tuple<int, int, int>&& std::forward<std::tuple<int, int, int> >(std::remove_reference<std::tuple<int, int, int> >::type&) (50,000x)
        .           				 _GLIBCXX_FORWARD(_Arg, __v), __an),
  150,000 ( 0.01%)  		      true);
        .           	}
        .           
        .                 return _Res(iterator(__res.first), false);
  250,000 ( 0.02%)      }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .           #if __cplusplus >= 201103L
        .               template<typename _Arg>
        .           #endif
        .               typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 2143 ----------------------------------------
-- line 2472 ----------------------------------------
        .           	  }
        .                 }
        .           #endif
        .           
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               void
  300,000 ( 0.02%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .               _M_erase_aux(const_iterator __position)
        .               {
        .                 _Link_type __y =
        .           	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
  250,000 ( 0.02%)  				(const_cast<_Base_ptr>(__position._M_node),
2,250,000 ( 0.18%)  => ???:0x000000000010b440 (50,000x)
  100,000 ( 0.01%)  				 this->_M_impl._M_header));
  250,000 ( 0.02%)        _M_drop_node(__y);
12,800,000 ( 1.02%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_drop_node(std::_Rb_tree_node<std::tuple<int, int, int> >*) (50,000x)
  250,000 ( 0.02%)        --_M_impl._M_node_count;
  150,000 ( 0.01%)      }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               void
  499,990 ( 0.04%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .               _M_erase_aux(const_iterator __first, const_iterator __last)
        .               {
1,799,964 ( 0.14%)        if (__first == begin() && __last == end())
1,549,969 ( 0.12%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::end() (49,999x)
1,549,969 ( 0.12%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::begin() (49,999x)
1,299,974 ( 0.10%)  => /usr/include/c++/11/bits/stl_tree.h:std::operator==(std::_Rb_tree_const_iterator<std::tuple<int, int, int> > const&, std::_Rb_tree_const_iterator<std::tuple<int, int, int> > const&) (99,998x)
1,199,976 ( 0.10%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_Rb_tree_const_iterator(std::_Rb_tree_iterator<std::tuple<int, int, int> > const&) (99,998x)
  149,997 ( 0.01%)  	clear();
3,399,932 ( 0.27%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::clear() (49,999x)
        .                 else
        .           	while (__first != __last)
        .           	  _M_erase_aux(__first++);
  349,993 ( 0.03%)      }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
  449,991 ( 0.04%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .               erase(const _Key& __x)
        .               {
  349,993 ( 0.03%)        pair<iterator, iterator> __p = equal_range(__x);
6,449,871 ( 0.51%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::equal_range(std::tuple<int, int, int> const&) (49,999x)
  199,996 ( 0.02%)        const size_type __old_size = size();
  399,992 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::size() const (49,999x)
  849,983 ( 0.07%)        _M_erase_aux(__p.first, __p.second);
11,799,764 ( 0.94%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::_M_erase_aux(std::_Rb_tree_const_iterator<std::tuple<int, int, int> >, std::_Rb_tree_const_iterator<std::tuple<int, int, int> >) (49,999x)
1,199,976 ( 0.10%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::_Rb_tree_const_iterator(std::_Rb_tree_iterator<std::tuple<int, int, int> > const&) (99,998x)
  299,994 ( 0.02%)        return __old_size - size();
  399,992 ( 0.03%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree<std::tuple<int, int, int>, std::tuple<int, int, int>, std::_Identity<std::tuple<int, int, int> >, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::size() const (49,999x)
  249,995 ( 0.02%)      }
        .           
        .             template<typename _Key, typename _Val, typename _KeyOfValue,
        .           	   typename _Compare, typename _Alloc>
        .               typename _Rb_tree<_Key, _Val, _KeyOfValue,
        .           		      _Compare, _Alloc>::iterator
        .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        .               find(const _Key& __k)
        .               {
-- line 2522 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/allocator.h
--------------------------------------------------------------------------------
Ir                 

-- line 148 ----------------------------------------
        .                 using is_always_equal
        .           	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        .           	= true_type;
        .           #endif
        .           
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 3035. std::allocator's constructors should be constexpr
        .                 _GLIBCXX20_CONSTEXPR
  550,275 ( 0.04%)        allocator() _GLIBCXX_NOTHROW { }
  350,112 ( 0.03%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<Edge>::new_allocator() (50,016x)
        .           
        .                 _GLIBCXX20_CONSTEXPR
  600,162 ( 0.05%)        allocator(const allocator& __a) _GLIBCXX_NOTHROW
  800,216 ( 0.06%)        : __allocator_base<_Tp>(__a) { }
       24 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<unsigned long>::new_allocator(__gnu_cxx::new_allocator<unsigned long> const&) (3x)
        .           
        .           #if __cplusplus >= 201103L
        .                 // Avoid implicit deprecation.
        .                 allocator& operator=(const allocator&) = default;
        .           #endif
        .           
        .                 template<typename _Tp1>
        .           	_GLIBCXX20_CONSTEXPR
       36 ( 0.00%)  	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
       21 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<unsigned long>::new_allocator() (3x)
        .           
        .           #if __cpp_constexpr_dynamic_alloc
        .                 constexpr
        .           #endif
1,650,605 ( 0.13%)        ~allocator() _GLIBCXX_NOTHROW { }
       84 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::~new_allocator() (12x)
        .           
        .           #if __cplusplus > 201703L
        .                 [[nodiscard,__gnu__::__always_inline__]]
        .                 constexpr _Tp*
        .                 allocate(size_t __n)
        .                 {
        .           #ifdef __cpp_lib_is_constant_evaluated
        .           	if (std::is_constant_evaluated())
-- line 182 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
Ir                  

-- line 77 ----------------------------------------
         .           
         .             /// @cond undocumented
         .           
         .             template<bool _TrivialValueTypes>
         .               struct __uninitialized_copy
         .               {
         .                 template<typename _InputIterator, typename _ForwardIterator>
         .                   static _ForwardIterator
   400,000 ( 0.03%)          __uninit_copy(_InputIterator __first, _InputIterator __last,
         .           		      _ForwardIterator __result)
         .                   {
   100,000 ( 0.01%)  	  _ForwardIterator __cur = __result;
         .           	  __try
         .           	    {
 1,499,978 ( 0.12%)  	      for (; __first != __last; ++__first, (void)++__cur)
 5,099,932 ( 0.41%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge const*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > > const&) (149,998x)
 1,199,976 ( 0.10%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator++() (99,998x)
   999,980 ( 0.08%)  		std::_Construct(std::__addressof(*__cur), *__first);
 3,799,924 ( 0.30%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Construct<Edge, Edge const&>(Edge*, Edge const&) (99,998x)
   799,984 ( 0.06%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator*() const (99,998x)
   699,986 ( 0.06%)  => /usr/include/c++/11/bits/move.h:Edge* std::__addressof<Edge>(Edge&) (99,998x)
    50,000 ( 0.00%)  	      return __cur;
         .           	    }
         .           	  __catch(...)
         .           	    {
         .           	      std::_Destroy(__result, __cur);
         .           	      __throw_exception_again;
         .           	    }
   150,000 ( 0.01%)  	}
         .               };
         .           
         .             template<>
         .               struct __uninitialized_copy<true>
         .               {
         .                 template<typename _InputIterator, typename _ForwardIterator>
         .                   static _ForwardIterator
         .                   __uninit_copy(_InputIterator __first, _InputIterator __last,
-- line 108 ----------------------------------------
-- line 118 ----------------------------------------
         .              *  @param  __last   An input iterator.
         .              *  @param  __result An output iterator.
         .              *  @return   __result + (__first - __last)
         .              *
         .              *  Like copy(), but does not require an initialized output range.
         .             */
         .             template<typename _InputIterator, typename _ForwardIterator>
         .               inline _ForwardIterator
   350,000 ( 0.03%)      uninitialized_copy(_InputIterator __first, _InputIterator __last,
         .           		       _ForwardIterator __result)
         .               {
         .                 typedef typename iterator_traits<_InputIterator>::value_type
         .           	_ValueType1;
         .                 typedef typename iterator_traits<_ForwardIterator>::value_type
         .           	_ValueType2;
         .           #if __cplusplus < 201103L
         .                 const bool __assignable = true;
-- line 134 ----------------------------------------
-- line 137 ----------------------------------------
         .                 // optimization that uses memmove would happily "copy" them anyway.
         .                 static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
         .           	  "result type must be constructible from value type of input range");
         .           
         .                 typedef typename iterator_traits<_InputIterator>::reference _RefType1;
         .                 typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
         .                 // Trivial types can have deleted assignment, so using std::copy
         .                 // would be ill-formed. Require assignability before using std::copy:
    50,000 ( 0.00%)        const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
         .           #endif
         .           
         .                 return std::__uninitialized_copy<__is_trivial(_ValueType1)
         .           				       && __is_trivial(_ValueType2)
         .           				       && __assignable>::
   300,000 ( 0.02%)  	__uninit_copy(__first, __last, __result);
14,799,760 ( 1.18%)  => /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*) (50,000x)
   100,000 ( 0.01%)      }
         .           
         .             /// @cond undocumented
         .           
         .             template<bool _TrivialValueType>
         .               struct __uninitialized_fill
         .               {
         .                 template<typename _ForwardIterator, typename _Tp>
         .                   static void
-- line 160 ----------------------------------------
-- line 222 ----------------------------------------
         .           
         .             /// @cond undocumented
         .           
         .             template<bool _TrivialValueType>
         .               struct __uninitialized_fill_n
         .               {
         .                 template<typename _ForwardIterator, typename _Size, typename _Tp>
         .                   static _ForwardIterator
        49 ( 0.00%)          __uninit_fill_n(_ForwardIterator __first, _Size __n,
         .           			const _Tp& __x)
         .                   {
        14 ( 0.00%)  	  _ForwardIterator __cur = __first;
         .           	  __try
         .           	    {
 1,400,021 ( 0.11%)  	      for (; __n > 0; --__n, (void) ++__cur)
 2,800,000 ( 0.22%)  		std::_Construct(std::__addressof(*__cur), __x);
13,300,000 ( 1.06%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Construct<Edge, Edge const&>(Edge*, Edge const&) (350,000x)
 2,450,000 ( 0.20%)  => /usr/include/c++/11/bits/move.h:Edge* std::__addressof<Edge>(Edge&) (350,000x)
         7 ( 0.00%)  	      return __cur;
         .           	    }
         .           	  __catch(...)
         .           	    {
         .           	      std::_Destroy(__first, __cur);
         .           	      __throw_exception_again;
         .           	    }
        14 ( 0.00%)  	}
         .               };
         .           
         .             template<>
         .               struct __uninitialized_fill_n<true>
         .               {
         .                 template<typename _ForwardIterator, typename _Size, typename _Tp>
         .                   static _ForwardIterator
        21 ( 0.00%)          __uninit_fill_n(_ForwardIterator __first, _Size __n,
         .           			const _Tp& __x)
        24 ( 0.00%)          { return std::fill_n(__first, __n, __x); }
 1,050,273 ( 0.08%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::fill_n<int*, unsigned long, int>(int*, unsigned long, int const&) (3x)
         .               };
         .           
         .             /// @endcond
         .           
         .              // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .              // DR 1339. uninitialized_fill_n should return the end of its range
         .             /**
         .              *  @brief Copies the value x into the range [first,first+n).
-- line 263 ----------------------------------------
-- line 265 ----------------------------------------
         .              *  @param  __n      The number of copies to make.
         .              *  @param  __x      The source value.
         .              *  @return   Nothing.
         .              *
         .              *  Like fill_n(), but does not require an initialized output range.
         .             */
         .             template<typename _ForwardIterator, typename _Size, typename _Tp>
         .               inline _ForwardIterator
        70 ( 0.00%)      uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
         .               {
         .                 typedef typename iterator_traits<_ForwardIterator>::value_type
         .           	_ValueType;
         .           
         .                 // Trivial types do not need a constructor to begin their lifetime,
         .                 // so try to use std::fill_n to benefit from its memmove optimization.
         .                 // For arbitrary class types and floating point types we can't assume
         .                 // that __n > 0 and std::__size_to_integer(__n) > 0 are equivalent,
-- line 281 ----------------------------------------
-- line 285 ----------------------------------------
         .           #else
         .                 // Trivial types can have deleted copy constructor, but the std::fill_n
         .                 // optimization that uses memmove would happily "copy" them anyway.
         .                 static_assert(is_constructible<_ValueType, const _Tp&>::value,
         .           	  "result type must be constructible from input type");
         .           
         .                 // Trivial types can have deleted assignment, so using std::fill_n
         .                 // would be ill-formed. Require assignability before using std::fill_n:
        10 ( 0.00%)        constexpr bool __can_fill
         .           	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
         .           #endif
         .                 return __uninitialized_fill_n<__is_trivial(_ValueType) && __can_fill>::
        60 ( 0.00%)  	__uninit_fill_n(__first, __n, __x);
 1,050,318 ( 0.08%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_fill_n<true>::__uninit_fill_n<int*, unsigned long, int>(int*, unsigned long, int const&) (3x)
        20 ( 0.00%)      }
         .           
         .             /// @cond undocumented
         .           
         .             // Extensions: versions of uninitialized_copy, uninitialized_fill,
         .             //  and uninitialized_fill_n that take an allocator parameter.
         .             //  We dispatch back to the standard versions when we're given the
         .             //  default allocator.  For nondefault allocators we do not use 
         .             //  any of the POD optimizations.
-- line 306 ----------------------------------------
-- line 323 ----------------------------------------
         .           	{
         .           	  std::_Destroy(__result, __cur, __alloc);
         .           	  __throw_exception_again;
         .           	}
         .               }
         .           
         .             template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
         .               inline _ForwardIterator
   400,000 ( 0.03%)      __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
         .           			   _ForwardIterator __result, allocator<_Tp>&)
   400,000 ( 0.03%)      { return std::uninitialized_copy(__first, __last, __result); }
15,599,760 ( 1.24%)  => /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::uninitialized_copy<__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*>(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >, Edge*) (50,000x)
         .           
         .             template<typename _InputIterator, typename _ForwardIterator,
         .           	   typename _Allocator>
         .               inline _ForwardIterator
         .               __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
         .           			   _ForwardIterator __result, _Allocator& __alloc)
         .               {
         .                 return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
-- line 341 ----------------------------------------
-- line 400 ----------------------------------------
         .           	  std::_Destroy(__first, __cur, __alloc);
         .           	  __throw_exception_again;
         .           	}
         .               }
         .           
         .             template<typename _ForwardIterator, typename _Size, typename _Tp,
         .           	   typename _Tp2>
         .               inline _ForwardIterator
        80 ( 0.00%)      __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
         .           			     const _Tp& __x, allocator<_Tp2>&)
        80 ( 0.00%)      { return std::uninitialized_fill_n(__first, __n, __x); }
19,950,217 ( 1.59%)  => /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::uninitialized_fill_n<Edge*, unsigned long, Edge>(Edge*, unsigned long, Edge const&) (7x)
         .           
         .           
         .             // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
         .             // __uninitialized_fill_move, __uninitialized_move_fill.
         .             // All of these algorithms take a user-supplied allocator, which is used
         .             // for construction and destruction.
         .           
         .             // __uninitialized_copy_move
-- line 418 ----------------------------------------
-- line 565 ----------------------------------------
         .           	}
         .               };
         .           
         .             template<bool _TrivialValueType>
         .               struct __uninitialized_default_n_1
         .               {
         .                 template<typename _ForwardIterator, typename _Size>
         .                   static _ForwardIterator
         6 ( 0.00%)          __uninit_default_n(_ForwardIterator __first, _Size __n)
         .                   {
         2 ( 0.00%)  	  _ForwardIterator __cur = __first;
         .           	  __try
         .           	    {
   200,003 ( 0.02%)  	      for (; __n > 0; --__n, (void) ++__cur)
   250,000 ( 0.02%)  		std::_Construct(std::__addressof(*__cur));
 4,600,000 ( 0.37%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Construct<std::vector<Edge, std::allocator<Edge> >>(std::vector<Edge, std::allocator<Edge> >*) (50,000x)
   350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::vector<Edge, std::allocator<Edge> >* std::__addressof<std::vector<Edge, std::allocator<Edge> > >(std::vector<Edge, std::allocator<Edge> >&) (50,000x)
         1 ( 0.00%)  	      return __cur;
         .           	    }
         .           	  __catch(...)
         .           	    {
         .           	      std::_Destroy(__first, __cur);
         .           	      __throw_exception_again;
         .           	    }
         2 ( 0.00%)  	}
         .               };
         .           
         .             template<>
         .               struct __uninitialized_default_n_1<true>
         .               {
         .                 template<typename _ForwardIterator, typename _Size>
         .                   static _ForwardIterator
         6 ( 0.00%)          __uninit_default_n(_ForwardIterator __first, _Size __n)
         .                   {
         2 ( 0.00%)  	  if (__n > 0)
         .           	    {
         .           	      typename iterator_traits<_ForwardIterator>::value_type* __val
         4 ( 0.00%)  		= std::__addressof(*__first);
         7 ( 0.00%)  => /usr/include/c++/11/bits/move.h:int* std::__addressof<int>(int&) (1x)
         3 ( 0.00%)  	      std::_Construct(__val);
        21 ( 0.00%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Construct<int>(int*) (1x)
         1 ( 0.00%)  	      ++__first;
         8 ( 0.00%)  	      __first = std::fill_n(__first, __n - 1, *__val);
   350,084 ( 0.03%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::fill_n<int*, unsigned long, int>(int*, unsigned long, int const&) (1x)
         .           	    }
         1 ( 0.00%)  	  return __first;
         2 ( 0.00%)  	}
         .               };
         .           
         .             // __uninitialized_default
         .             // Fills [first, last) with value-initialized value_types.
         .             template<typename _ForwardIterator>
         .               inline void
         .               __uninitialized_default(_ForwardIterator __first,
         .           			    _ForwardIterator __last)
-- line 614 ----------------------------------------
-- line 622 ----------------------------------------
         .           				     && __assignable>::
         .           	__uninit_default(__first, __last);
         .               }
         .           
         .             // __uninitialized_default_n
         .             // Fills [first, first + n) with value-initialized value_types.
         .             template<typename _ForwardIterator, typename _Size>
         .               inline _ForwardIterator
        12 ( 0.00%)      __uninitialized_default_n(_ForwardIterator __first, _Size __n)
         .               {
         .                 typedef typename iterator_traits<_ForwardIterator>::value_type
         .           	_ValueType;
         .                 // See uninitialized_fill_n for the conditions for using std::fill_n.
         2 ( 0.00%)        constexpr bool __can_fill
         .           	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
         .           
         .                 return __uninitialized_default_n_1<__is_trivial(_ValueType)
         .           					 && __can_fill>::
        10 ( 0.00%)  	__uninit_default_n(__first, __n);
   350,139 ( 0.03%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_default_n_1<true>::__uninit_default_n<int*, unsigned long>(int*, unsigned long) (1x)
         4 ( 0.00%)      }
         .           
         .           
         .             // __uninitialized_default_a
         .             // Fills [first, last) with value_types constructed by the allocator
         .             // alloc, with no arguments passed to the construct call.
         .             template<typename _ForwardIterator, typename _Allocator>
         .               void
         .               __uninitialized_default_a(_ForwardIterator __first,
-- line 649 ----------------------------------------
-- line 694 ----------------------------------------
         .           	  __throw_exception_again;
         .           	}
         .               }
         .           
         .             // __uninitialized_default_n_a specialization for std::allocator,
         .             // which ignores the allocator and value-initializes the elements.
         .             template<typename _ForwardIterator, typename _Size, typename _Tp>
         .               inline _ForwardIterator
        14 ( 0.00%)      __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
         .           				allocator<_Tp>&)
        14 ( 0.00%)      { return std::__uninitialized_default_n(__first, __n); }
 5,400,028 ( 0.43%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::vector<Edge, std::allocator<Edge> >* std::__uninitialized_default_n<std::vector<Edge, std::allocator<Edge> >*, unsigned long>(std::vector<Edge, std::allocator<Edge> >*, unsigned long) (1x)
         .           
         .             template<bool _TrivialValueType>
         .               struct __uninitialized_default_novalue_1
         .               {
         .                 template<typename _ForwardIterator>
         .           	static void
         .           	__uninit_default_novalue(_ForwardIterator __first,
         .           				 _ForwardIterator __last)
-- line 712 ----------------------------------------
-- line 978 ----------------------------------------
         .               }
         .           #endif // C++17
         .           
         .           #if __cplusplus >= 201103L
         .             /// @cond undocumented
         .           
         .             template<typename _Tp, typename _Up, typename _Allocator>
         .               inline void
 7,689,955 ( 0.61%)      __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
         .           			_Allocator& __alloc)
         .               noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
         .           			 __dest, std::move(*__orig)))
         .           	     && noexcept(std::allocator_traits<_Allocator>::destroy(
         .           			    __alloc, std::__addressof(*__orig))))
         .               {
         .                 typedef std::allocator_traits<_Allocator> __traits;
 9,887,085 ( 0.79%)        __traits::construct(__alloc, __dest, std::move(*__orig));
71,406,725 ( 5.69%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<Edge> >::construct<Edge, Edge>(std::allocator<Edge>&, Edge*, Edge&&) (1,098,565x)
 7,689,955 ( 0.61%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<Edge&>::type&& std::move<Edge&>(Edge&) (1,098,565x)
 8,788,520 ( 0.70%)        __traits::destroy(__alloc, std::__addressof(*__orig));
24,168,430 ( 1.92%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<Edge> >::destroy<Edge>(std::allocator<Edge>&, Edge*) (1,098,565x)
 7,689,955 ( 0.61%)  => /usr/include/c++/11/bits/move.h:Edge* std::__addressof<Edge>(Edge&) (1,098,565x)
 3,295,695 ( 0.26%)      }
         .           
         .             // This class may be specialized for specific types.
         .             // Also known as is_trivially_relocatable.
         .             template<typename _Tp, typename = void>
         .               struct __is_bitwise_relocatable
         .               : is_trivial<_Tp> { };
         .           
         .             template <typename _Tp, typename _Up>
-- line 1004 ----------------------------------------
-- line 1010 ----------------------------------------
         .                 if (__count > 0)
         .           	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
         .                 return __result + __count;
         .               }
         .           
         .             template <typename _InputIterator, typename _ForwardIterator,
         .           	    typename _Allocator>
         .               inline _ForwardIterator
 1,802,853 ( 0.14%)      __relocate_a_1(_InputIterator __first, _InputIterator __last,
         .           		   _ForwardIterator __result, _Allocator& __alloc)
         .               noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
         .           					       std::addressof(*__first),
         .           					       __alloc)))
         .               {
         .                 typedef typename iterator_traits<_InputIterator>::value_type
         .           	_ValueType;
         .                 typedef typename iterator_traits<_ForwardIterator>::value_type
         .           	_ValueType2;
         .                 static_assert(std::is_same<_ValueType, _ValueType2>::value,
         .           	  "relocation is only possible for values of the same type");
   400,634 ( 0.03%)        _ForwardIterator __cur = __result;
 6,294,093 ( 0.50%)        for (; __first != __last; ++__first, (void)++__cur)
14,281,345 ( 1.14%)  	std::__relocate_object_a(std::__addressof(*__cur),
140,616,320 (11.20%)  => /usr/include/c++/11/bits/stl_uninitialized.h:void std::__relocate_object_a<Edge, Edge, std::allocator<Edge> >(Edge*, Edge*, std::allocator<Edge>&) (1,098,565x)
15,379,910 ( 1.22%)  => /usr/include/c++/11/bits/move.h:Edge* std::__addressof<Edge>(Edge&) (2,197,130x)
         .           				 std::__addressof(*__first), __alloc);
   200,317 ( 0.02%)        return __cur;
   600,951 ( 0.05%)      }
         .           
         .             template <typename _InputIterator, typename _ForwardIterator,
         .           	    typename _Allocator>
         .               inline _ForwardIterator
 2,003,170 ( 0.16%)      __relocate_a(_InputIterator __first, _InputIterator __last,
         .           		 _ForwardIterator __result, _Allocator& __alloc)
         .               noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
         .           				     std::__niter_base(__last),
         .           				     std::__niter_base(__result), __alloc)))
         .               {
 3,405,389 ( 0.27%)        return __relocate_a_1(std::__niter_base(__first),
179,576,404 (14.30%)  => /usr/include/c++/11/bits/stl_uninitialized.h:Edge* std::__relocate_a_1<Edge*, Edge*, std::allocator<Edge> >(Edge*, Edge*, Edge*, std::allocator<Edge>&) (200,316x)
 4,206,636 ( 0.33%)  => /usr/include/c++/11/bits/stl_algobase.h:Edge* std::__niter_base<Edge*>(Edge*) (600,948x)
         .           			    std::__niter_base(__last),
         .           			    std::__niter_base(__result), __alloc);
 1,001,585 ( 0.08%)      }
         .           
         .             /// @endcond
         .           #endif
         .           
         .             /// @} group memory
         .           
         .           _GLIBCXX_END_NAMESPACE_VERSION
         .           } // namespace
-- line 1057 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_construct.h
--------------------------------------------------------------------------------
Ir                 

-- line 101 ----------------------------------------
        .             /**
        .              * Constructs an object in existing memory by invoking an allocated
        .              * object's constructor with an initializer.
        .              */
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename... _Args>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
3,399,991 ( 0.27%)      _Construct(_Tp* __p, _Args&&... __args)
        .               {
        .           #if __cplusplus >= 202002L && __has_builtin(__builtin_is_constant_evaluated)
        .                 if (__builtin_is_constant_evaluated())
        .           	{
        .           	  // Allow std::_Construct to be used in constant expressions.
        .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
        .           	  return;
        .           	}
        .           #endif
5,849,981 ( 0.47%)        ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
        8 ( 0.00%)  => /usr/include/c++/11/new:operator new(unsigned long, void*) (1x)
1,949,995 ( 0.16%)      }
        .           #else
        .             template<typename _T1, typename _T2>
        .               inline void
        .               _Construct(_T1* __p, const _T2& __value)
        .               {
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 402. wrong new expression in [some_]allocator::construct
        .                 ::new(static_cast<void*>(__p)) _T1(__value);
-- line 128 ----------------------------------------
-- line 138 ----------------------------------------
        .               _GLIBCXX20_CONSTEXPR void
        .               _Destroy(_ForwardIterator __first, _ForwardIterator __last);
        .           
        .             /**
        .              * Destroy the object pointed to by a pointer type.
        .              */
        .             template<typename _Tp>
        .               _GLIBCXX14_CONSTEXPR inline void
  250,000 ( 0.02%)      _Destroy(_Tp* __pointer)
        .               {
        .           #if __cplusplus > 201703L
        .                 std::destroy_at(__pointer);
        .           #else
  150,000 ( 0.01%)        __pointer->~_Tp();
14,799,914 ( 1.18%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::~vector() (50,000x)
        .           #endif
  150,000 ( 0.01%)      }
        .           
        .             template<bool>
        .               struct _Destroy_aux
        .               {
        .                 template<typename _ForwardIterator>
        .           	static _GLIBCXX20_CONSTEXPR void
        6 ( 0.00%)  	__destroy(_ForwardIterator __first, _ForwardIterator __last)
        .           	{
  200,004 ( 0.02%)  	  for (; __first != __last; ++__first)
  250,000 ( 0.02%)  	    std::_Destroy(std::__addressof(*__first));
15,349,914 ( 1.22%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<std::vector<Edge, std::allocator<Edge> > >(std::vector<Edge, std::allocator<Edge> >*) (50,000x)
  350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::vector<Edge, std::allocator<Edge> >* std::__addressof<std::vector<Edge, std::allocator<Edge> > >(std::vector<Edge, std::allocator<Edge> >&) (50,000x)
        4 ( 0.00%)  	}
        .               };
        .           
        .             template<>
        .               struct _Destroy_aux<true>
        .               {
        .                 template<typename _ForwardIterator>
        .                   static void
  800,176 ( 0.06%)          __destroy(_ForwardIterator, _ForwardIterator) { }
        .               };
        .           
        .             /**
        .              * Destroy a range of objects.  If the value_type of the object has
        .              * a trivial destructor, the compiler should optimize all of this
        .              * away, otherwise the objects' destructors must be invoked.
        .              */
        .             template<typename _ForwardIterator>
        .               _GLIBCXX20_CONSTEXPR inline void
  600,138 ( 0.05%)      _Destroy(_ForwardIterator __first, _ForwardIterator __last)
        .               {
        .                 typedef typename iterator_traits<_ForwardIterator>::value_type
        .                                  _Value_type;
        .           #if __cplusplus >= 201103L
        .                 // A deleted destructor is trivial, this ensures we reject such types:
        .                 static_assert(is_destructible<_Value_type>::value,
        .           		    "value type is destructible");
        .           #endif
        .           #if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
        .                 if (std::is_constant_evaluated())
        .           	return _Destroy_aux<false>::__destroy(__first, __last);
        .           #endif
        .                 std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  500,115 ( 0.04%)  	__destroy(__first, __last);
16,149,928 ( 1.29%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::vector<Edge, std::allocator<Edge> >*>(std::vector<Edge, std::allocator<Edge> >*, std::vector<Edge, std::allocator<Edge> >*) (1x)
  300,069 ( 0.02%)      }
        .           
        .             template<bool>
        .               struct _Destroy_n_aux
        .               {
        .                 template<typename _ForwardIterator, typename _Size>
        .           	static _GLIBCXX20_CONSTEXPR _ForwardIterator
        .           	__destroy_n(_ForwardIterator __first, _Size __count)
        .           	{
-- line 205 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/vector.tcc
--------------------------------------------------------------------------------
Ir                 

-- line 101 ----------------------------------------
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename _Alloc>
        .               template<typename... _Args>
        .           #if __cplusplus > 201402L
        .                 typename vector<_Tp, _Alloc>::reference
        .           #else
        .                 void
        .           #endif
  699,986 ( 0.06%)        vector<_Tp, _Alloc>::
        .                 emplace_back(_Args&&... __args)
        .                 {
  599,988 ( 0.05%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        .           	  {
        .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
        .           	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
        .           				     std::forward<_Args>(__args)...);
        .           	    ++this->_M_impl._M_finish;
        .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        .           	  }
        .           	else
1,299,974 ( 0.10%)  	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
116,350,854 ( 9.26%)  => /usr/include/c++/11/bits/vector.tcc:void std::vector<Edge, std::allocator<Edge> >::_M_realloc_insert<Edge>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, Edge&&) (99,998x)
3,199,936 ( 0.25%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (99,998x)
  699,986 ( 0.06%)  => /usr/include/c++/11/bits/move.h:Edge&& std::forward<Edge>(std::remove_reference<Edge>::type&) (99,998x)
        .           #if __cplusplus > 201402L
  299,994 ( 0.02%)  	return back();
10,699,786 ( 0.85%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::back() (99,998x)
        .           #endif
  299,994 ( 0.02%)        }
        .           #endif
        .           
        .             template<typename _Tp, typename _Alloc>
        .               typename vector<_Tp, _Alloc>::iterator
        .               vector<_Tp, _Alloc>::
        .           #if __cplusplus >= 201103L
        .               insert(const_iterator __position, const value_type& __x)
        .           #else
-- line 133 ----------------------------------------
-- line 418 ----------------------------------------
        .                 *__position = std::forward<_Arg>(__arg);
        .           #endif
        .               }
        .           
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename _Alloc>
        .               template<typename... _Args>
        .                 void
1,101,738 ( 0.09%)        vector<_Tp, _Alloc>::
        .                 _M_realloc_insert(iterator __position, _Args&&... __args)
        .           #else
        .             template<typename _Tp, typename _Alloc>
        .               void
        .               vector<_Tp, _Alloc>::
        .               _M_realloc_insert(iterator __position, const _Tp& __x)
        .           #endif
        .               {
        .                 const size_type __len =
  600,948 ( 0.05%)  	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   48,969 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_M_check_len(unsigned long, char const*) const (160x)
  300,474 ( 0.02%)        pointer __old_start = this->_M_impl._M_start;
  300,474 ( 0.02%)        pointer __old_finish = this->_M_impl._M_finish;
1,001,580 ( 0.08%)        const size_type __elems_before = __position - begin();
    6,080 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::difference_type __gnu_cxx::operator-<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) (160x)
    4,960 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() (160x)
  600,948 ( 0.05%)        pointer __new_start(this->_M_allocate(__len));
   56,226 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_allocate(unsigned long) (160x)
  200,316 ( 0.02%)        pointer __new_finish(__new_start);
        .                 __try
        .           	{
        .           	  // The order of the three operations is dictated by the C++11
        .           	  // case, where the moves could alter a new element belonging
        .           	  // to the existing vector.  This is an issue only for callers
        .           	  // taking the element by lvalue ref (see last bullet of C++11
        .           	  // [res.on.arguments]).
1,101,738 ( 0.09%)  	  _Alloc_traits::construct(this->_M_impl,
   10,400 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<Edge> >::construct<Edge, Edge const&>(std::allocator<Edge>&, Edge*, Edge const&) (160x)
    1,120 ( 0.00%)  => /usr/include/c++/11/bits/move.h:Edge const& std::forward<Edge const&>(std::remove_reference<Edge const&>::type&) (160x)
  600,948 ( 0.05%)  				   __new_start + __elems_before,
        .           #if __cplusplus >= 201103L
        .           				   std::forward<_Args>(__args)...);
        .           #else
        .           				   __x);
        .           #endif
  100,158 ( 0.01%)  	  __new_finish = pointer();
        .           
        .           #if __cplusplus >= 201103L
        .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        .           	    {
1,001,580 ( 0.08%)  	      __new_finish = _S_relocate(__old_start, __position.base(),
167,787,360 (13.36%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_S_relocate(Edge*, Edge*, Edge*, std::allocator<Edge>&) (160x)
    1,120 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::base() const (160x)
  400,632 ( 0.03%)  					 __new_start, _M_get_Tp_allocator());
    1,120 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_get_Tp_allocator() (160x)
        .           
  100,158 ( 0.01%)  	      ++__new_finish;
        .           
1,001,580 ( 0.08%)  	      __new_finish = _S_relocate(__position.base(), __old_finish,
   16,640 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::_S_relocate(Edge*, Edge*, Edge*, std::allocator<Edge>&) (160x)
    1,120 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::base() const (160x)
  400,632 ( 0.03%)  					 __new_finish, _M_get_Tp_allocator());
    1,120 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_get_Tp_allocator() (160x)
        .           	    }
        .           	  else
        .           #endif
        .           	    {
        .           	      __new_finish
        .           		= std::__uninitialized_move_if_noexcept_a
        .           		(__old_start, __position.base(),
        .           		 __new_start, _M_get_Tp_allocator());
-- line 475 ----------------------------------------
-- line 492 ----------------------------------------
        .           	  _M_deallocate(__new_start, __len);
        .           	  __throw_exception_again;
        .           	}
        .           #if __cplusplus >= 201103L
        .                 if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
        .           #endif
        .           	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
        .                 _GLIBCXX_ASAN_ANNOTATE_REINIT;
  500,790 ( 0.04%)        _M_deallocate(__old_start,
   30,718 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<Edge, std::allocator<Edge> >::_M_deallocate(Edge*, unsigned long) (160x)
  701,106 ( 0.06%)  		    this->_M_impl._M_end_of_storage - __old_start);
  300,474 ( 0.02%)        this->_M_impl._M_start = __new_start;
  300,474 ( 0.02%)        this->_M_impl._M_finish = __new_finish;
1,001,580 ( 0.08%)        this->_M_impl._M_end_of_storage = __new_start + __len;
  701,106 ( 0.06%)      }
        .           
        .             template<typename _Tp, typename _Alloc>
        .               void
        .               vector<_Tp, _Alloc>::
        .               _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
        .               {
        .                 if (__n != 0)
        .           	{
-- line 513 ----------------------------------------
-- line 603 ----------------------------------------
        .           	      this->_M_impl._M_end_of_storage = __new_start + __len;
        .           	    }
        .           	}
        .               }
        .           
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename _Alloc>
        .               void
        7 ( 0.00%)      vector<_Tp, _Alloc>::
        .               _M_default_append(size_type __n)
        .               {
        2 ( 0.00%)        if (__n != 0)
        .           	{
        4 ( 0.00%)  	  const size_type __size = size();
       16 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::size() const (1x)
        3 ( 0.00%)  	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
        8 ( 0.00%)  					 - this->_M_impl._M_finish);
        .           
       13 ( 0.00%)  	  if (__size > max_size() || __navail > max_size() - __size)
      170 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::max_size() const (2x)
        .           	    __builtin_unreachable();
        .           
        3 ( 0.00%)  	  if (__navail >= __n)
        .           	    {
        .           	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        .           	      this->_M_impl._M_finish =
        .           		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
        .           						 __n, _M_get_Tp_allocator());
        .           	      _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
        .           	    }
        .           	  else
        .           	    {
        .           	      const size_type __len =
        7 ( 0.00%)  		_M_check_len(__n, "vector::_M_default_append");
      307 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_M_check_len(unsigned long, char const*) const (1x)
        6 ( 0.00%)  	      pointer __new_start(this->_M_allocate(__len));
      370 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_M_allocate(unsigned long) (1x)
        .           	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        .           		{
        .           		  __try
        .           		    {
       13 ( 0.00%)  		      std::__uninitialized_default_n_a(__new_start + __size,
5,400,042 ( 0.43%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::vector<Edge, std::allocator<Edge> >* std::__uninitialized_default_n_a<std::vector<Edge, std::allocator<Edge> >*, unsigned long, std::vector<Edge, std::allocator<Edge> > >(std::vector<Edge, std::allocator<Edge> >*, unsigned long, std::allocator<std::vector<Edge, std::allocator<Edge> > >&) (1x)
        4 ( 0.00%)  			      __n, _M_get_Tp_allocator());
        7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_M_get_Tp_allocator() (1x)
        .           		    }
        .           		  __catch(...)
        .           		    {
        .           		      _M_deallocate(__new_start, __len);
        .           		      __throw_exception_again;
        .           		    }
        7 ( 0.00%)  		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
      104 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_S_relocate(std::vector<Edge, std::allocator<Edge> >*, std::vector<Edge, std::allocator<Edge> >*, std::vector<Edge, std::allocator<Edge> >*, std::allocator<std::vector<Edge, std::allocator<Edge> > >&) (1x)
        4 ( 0.00%)  			      __new_start, _M_get_Tp_allocator());
        7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_M_get_Tp_allocator() (1x)
        .           		}
        .           	      else
        .           		{
        .           		  pointer __destroy_from = pointer();
        .           		  __try
        .           		    {
        .           		      std::__uninitialized_default_n_a(__new_start + __size,
        .           			      __n, _M_get_Tp_allocator());
-- line 657 ----------------------------------------
-- line 667 ----------------------------------------
        .           				      _M_get_Tp_allocator());
        .           		      _M_deallocate(__new_start, __len);
        .           		      __throw_exception_again;
        .           		    }
        .           		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        .           				_M_get_Tp_allocator());
        .           		}
        .           	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
        8 ( 0.00%)  	      _M_deallocate(this->_M_impl._M_start,
       12 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::_M_deallocate(std::vector<Edge, std::allocator<Edge> >*, unsigned long) (1x)
        2 ( 0.00%)  			    this->_M_impl._M_end_of_storage
        8 ( 0.00%)  			    - this->_M_impl._M_start);
        3 ( 0.00%)  	      this->_M_impl._M_start = __new_start;
       12 ( 0.00%)  	      this->_M_impl._M_finish = __new_start + __size + __n;
       10 ( 0.00%)  	      this->_M_impl._M_end_of_storage = __new_start + __len;
        .           	    }
        .           	}
        5 ( 0.00%)      }
        .           
        .             template<typename _Tp, typename _Alloc>
        .               bool
        .               vector<_Tp, _Alloc>::
        .               _M_shrink_to_fit()
        .               {
        .                 if (capacity() == size())
        .           	return false;
-- line 691 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: MSTSolver.cpp
--------------------------------------------------------------------------------
Ir                  

-- line 74 ----------------------------------------
         .               response += "Longest distance: " + std::to_string(longestDistance(mst)) + "\n";
         .               response += "Shortest distance: " + std::to_string(shortestDistance(mst)) + "\n";
         .               response += "Average distance: " + std::to_string(averageDistance(mst)) + "\n";
         .               return response;
         .           }
         .           
         .           
         .           // Helper function to find the root of a set in the disjoint-set/union-find structure
20,944,259 ( 1.67%)  int find(std::vector<int>& parent, int i) {
32,912,407 ( 2.62%)      if (parent[i] != i) {
19,791,048 ( 1.58%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (1,649,254x)
25,512,877 ( 2.03%)          parent[i] = find(parent, parent[i]);
77,098,252 ( 6.14%)  => MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int)'2 (1,173,631x)
28,167,144 ( 2.24%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (2,347,262x)
         .               }
20,944,259 ( 1.67%)      return parent[i];
19,791,048 ( 1.58%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (1,649,254x)
 8,976,111 ( 0.71%)  }
         .           
         .           // Helper function to do union of two subsets in disjoint-set/union-find structure
   449,991 ( 0.04%)  void unionSets(std::vector<int>& parent, std::vector<int>& rank, int u, int v) {
   299,994 ( 0.02%)      int rootU = find(parent, u);
 2,599,948 ( 0.21%)  => MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int) (49,999x)
   299,994 ( 0.02%)      int rootV = find(parent, v);
 2,599,948 ( 0.21%)  => MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int) (49,999x)
         .           
   899,982 ( 0.07%)      if (rank[rootU] < rank[rootV]) {
 1,199,976 ( 0.10%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (99,998x)
         .                   parent[rootU] = rootV;
   899,982 ( 0.07%)      } else if (rank[rootU] > rank[rootV]) {
 1,199,976 ( 0.10%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (99,998x)
   202,848 ( 0.02%)          parent[rootV] = rootU;
   304,272 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (25,356x)
         .               } else {
   197,144 ( 0.02%)          parent[rootV] = rootU;
   295,716 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (24,643x)
   221,787 ( 0.02%)          rank[rootU]++;
   295,716 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (24,643x)
         .               }
   225,352 ( 0.02%)  }
         .           
         .           // Boruvka's algorithm implementation
        11 ( 0.00%)  std::vector<Edge> BoruvkaSolver::solve(Graph& graph) {
         6 ( 0.00%)      if (!graph.isConnected()) {
60,162,712 ( 4.79%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::isConnected() (1x)
         .                   return {};
         .               }
         4 ( 0.00%)      int numVertices = graph.getNumVertices();
         8 ( 0.00%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::getNumVertices() const (1x)
         3 ( 0.00%)      std::vector<Edge> mstEdges;
        67 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector() (1x)
        13 ( 0.00%)      std::vector<int> parent(numVertices);
   350,891 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (1x)
        14 ( 0.00%)      std::vector<int> rank(numVertices, 0);
   350,865 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector(unsigned long, int const&, std::allocator<int> const&) (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (1x)
         .           
         .               // Initialize each vertex as its own parent (disjoint sets)
   200,005 ( 0.02%)      for (int i = 0; i < numVertices; ++i) {
   400,000 ( 0.03%)          parent[i] = i;
   600,000 ( 0.05%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (50,000x)
         .               }
         .           
         2 ( 0.00%)      int numComponents = numVertices;
         .           
         .               // Continue until there is only one component
        17 ( 0.00%)      while (numComponents > 1) {
         .                   // Array to store the cheapest outgoing edge for each component
       147 ( 0.00%)          std::vector<Edge> cheapestEdge(numVertices, Edge{-1, -1, std::numeric_limits<int>::max()});
19,955,359 ( 1.59%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector(unsigned long, Edge const&, std::allocator<Edge> const&) (7x)
       133 ( 0.00%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.hpp:Edge::Edge(int, int, int) (7x)
       126 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::allocator() (7x)
       126 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::~allocator() (7x)
        42 ( 0.00%)  => /usr/include/c++/11/limits:std::numeric_limits<int>::max() (7x)
         .           
         .                   // Traverse all edges and find the cheapest outgoing edge for each component
 9,799,965 ( 0.78%)          for (const Edge& edge : graph.getEdges()) {
314,614,706 (25.05%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::getEdges() const (7x)
23,799,762 ( 1.90%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) (699,993x)
 8,399,832 ( 0.67%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator++() (699,986x)
 5,599,888 ( 0.45%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const (699,986x)
       224 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (7x)
       217 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() (7x)
 2,099,958 ( 0.17%)              int u = edge.u;
 2,099,958 ( 0.17%)              int v = edge.v;
 2,099,958 ( 0.17%)              int weight = edge.weight;
         .           
         .                       // Find the set (component) for both vertices
 4,199,916 ( 0.33%)              int setU = find(parent, u);
88,716,722 ( 7.06%)  => MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int) (699,986x)
 4,199,916 ( 0.33%)              int setV = find(parent, v);
103,965,362 ( 8.28%)  => MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int) (699,986x)
         .           
         .                       // We only care about outgoing edges, so ensure u -> v is the correct direction
 2,099,958 ( 0.17%)              if (setU != setV) {
         .                           // Update the cheapest outgoing edge for setU
 1,641,970 ( 0.13%)                  if (cheapestEdge[setU].weight > weight) {
 2,239,050 ( 0.18%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long) (149,270x)
   400,642 ( 0.03%)                      cheapestEdge[setU] = edge;
   546,330 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long) (36,422x)
         .                           }
         .                           // Update the cheapest outgoing edge for setV
 1,641,970 ( 0.13%)                  if (cheapestEdge[setV].weight > weight) {
 2,239,050 ( 0.18%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long) (149,270x)
   820,985 ( 0.07%)                      cheapestEdge[setV] = edge;
 1,119,525 ( 0.09%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long) (74,635x)
         .                           }
         .                       }
        21 ( 0.00%)          }
     3,246 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::~vector() (7x)
         .           
         .                   // Add the cheapest edges to the MST and perform union of sets
 1,400,035 ( 0.11%)          for (int i = 0; i < numVertices; ++i) {
 2,450,000 ( 0.20%)              const Edge& edge = cheapestEdge[i];
 5,250,000 ( 0.42%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::operator[](unsigned long) (350,000x)
         .           
         .                       // If a valid cheapest edge was found for this component
 1,698,568 ( 0.14%)              if (edge.u != -1 && edge.v != -1) {
   522,494 ( 0.04%)                  int setU = find(parent, edge.u);
 9,221,144 ( 0.73%)  => MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int) (74,642x)
   522,494 ( 0.04%)                  int setV = find(parent, edge.v);
 6,222,469 ( 0.50%)  => MSTSolver.cpp:find(std::vector<int, std::allocator<int> >&, int) (74,642x)
         .           
         .                           // If the components are different, include this edge in MST
   223,926 ( 0.02%)                  if (setU != setV) {
   249,995 ( 0.02%)                      mstEdges.push_back(edge);
15,157,261 ( 1.21%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::push_back(Edge const&) (49,999x)
   299,994 ( 0.02%)                      unionSets(parent, rank, setU, setV);
12,192,626 ( 0.97%)  => MSTSolver.cpp:unionSets(std::vector<int, std::allocator<int> >&, std::vector<int, std::allocator<int> >&, int, int) (49,999x)
    49,999 ( 0.00%)                      numComponents--;  // We've merged two components
         .                           }
         .                       }
         .                   }
         .           
         .                   // Reset the cheapest edges for the next iteration
       147 ( 0.00%)          std::fill(cheapestEdge.begin(), cheapestEdge.end(), Edge{-1, -1, std::numeric_limits<int>::max()});
 3,500,588 ( 0.28%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::fill<__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, Edge>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, Edge const&) (7x)
       224 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (7x)
       217 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() (7x)
       133 ( 0.00%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.hpp:Edge::Edge(int, int, int) (7x)
        42 ( 0.00%)  => /usr/include/c++/11/limits:std::numeric_limits<int>::max() (7x)
        21 ( 0.00%)      }
     2,465 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::~vector() (7x)
         .           
         5 ( 0.00%)      return mstEdges;
       120 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector(std::vector<Edge, std::allocator<Edge> >&&) (1x)
        17 ( 0.00%)  }
       135 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::~vector() (1x)
       700 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (2x)
         .           
        11 ( 0.00%)  std::vector<Edge> PrimSolver::solve(Graph& graph) {
         6 ( 0.00%)      if (!graph.isConnected()) {
60,162,484 ( 4.79%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::isConnected() (1x)
         .                   return {};
         .               }
         4 ( 0.00%)      int numVertices = graph.getNumVertices();
         8 ( 0.00%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::getNumVertices() const (1x)
         .               
        14 ( 0.00%)      std::vector<int> key(numVertices, INT_MAX);  // Key values to pick the minimum edge weight
   350,804 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector(unsigned long, int const&, std::allocator<int> const&) (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (1x)
        14 ( 0.00%)      std::vector<bool> inMST(numVertices, false); // To keep track of vertices included in MST
     6,993 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::vector(unsigned long, bool const&, std::allocator<bool> const&) (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<bool>::allocator() (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<bool>::~allocator() (1x)
        14 ( 0.00%)      std::vector<int> parent(numVertices, -1);    // Array to store the MST
   350,804 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector(unsigned long, int const&, std::allocator<int> const&) (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (1x)
        18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (1x)
         3 ( 0.00%)      std::vector<Edge> mstEdges;
        67 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector() (1x)
         .           
         5 ( 0.00%)      key[0] = 0; // Start from vertex 0 (arbitrary choice)
        12 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (1x)
         .           
         .               // Min-heap (or set) to get the vertex with the smallest key
         .               using Tuple = std::tuple<int, int, int>; // (key, vertex, parent)
         3 ( 0.00%)      std::set<Tuple> pq;
        95 ( 0.00%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::set() (1x)
        14 ( 0.00%)      pq.insert(std::make_tuple(0, 0, -1)); // Starting with vertex 0
     1,021 ( 0.00%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::insert(std::tuple<int, int, int>&&) (1x)
       299 ( 0.00%)  => /usr/include/c++/11/tuple:std::tuple<std::__strip_reference_wrapper<std::decay<int>::type>::__type, std::__strip_reference_wrapper<std::decay<int>::type>::__type, std::__strip_reference_wrapper<std::decay<int>::type>::__type> std::make_tuple<int, int, int>(int&&, int&&, int&&) (1x)
         .           
   300,007 ( 0.02%)      while (!pq.empty()) {
 1,000,020 ( 0.08%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::empty() const (50,001x)
         .                   // Get the vertex with the smallest key value
 1,150,000 ( 0.09%)          auto [minKey, u, parent_u] = *pq.begin();
 2,050,000 ( 0.16%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::begin() const (50,000x)
 2,350,000 ( 0.19%)  => /usr/include/c++/11/tuple:std::tuple_element<1ul, std::tuple<int, int, int> >::type&& std::get<1ul, int, int, int>(std::tuple<int, int, int>&&) (50,000x)
 2,350,000 ( 0.19%)  => /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<int, int, int> >::type&& std::get<0ul, int, int, int>(std::tuple<int, int, int>&&) (50,000x)
 2,300,000 ( 0.18%)  => /usr/include/c++/11/tuple:std::tuple_element<2ul, std::tuple<int, int, int> >::type&& std::get<2ul, int, int, int>(std::tuple<int, int, int>&&) (50,000x)
 1,950,000 ( 0.16%)  => /usr/include/c++/11/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::tuple<int, int, int> >::operator*() const (50,000x)
   400,000 ( 0.03%)          pq.erase(pq.begin());
22,850,000 ( 1.82%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::erase[abi:cxx11](std::_Rb_tree_const_iterator<std::tuple<int, int, int> >) (50,000x)
 2,050,000 ( 0.16%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::begin() const (50,000x)
         .           
   700,000 ( 0.06%)          if (inMST[u]) continue; // Skip if it's already included
11,400,000 ( 0.91%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (50,000x)
   700,000 ( 0.06%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (50,000x)
   650,000 ( 0.05%)          inMST[u] = true;  // Mark it as included in the MST
11,400,000 ( 0.91%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (50,000x)
 1,050,000 ( 0.08%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) (50,000x)
         .                   
         .                   // If it's not the starting vertex, add the edge to MST
   200,000 ( 0.02%)          if (parent_u != -1) {
   649,987 ( 0.05%)              mstEdges.push_back(graph.getEdge(u, parent_u)); // Undirected edge between u and parent_u
15,156,852 ( 1.21%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::push_back(Edge const&) (49,999x)
 8,649,827 ( 0.69%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::getEdge(int, int) (49,999x)
         .                   }
         .           
         .                   // Loop over all neighbors of u (undirected edges u <-> v)
 2,649,972 ( 0.21%)          for (const Edge& edge : graph.getNeighbors(u)) {
41,100,048 ( 3.27%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.cpp:Graph::getNeighbors(int) const (50,000x)
 5,099,932 ( 0.41%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) (149,998x)
 1,600,000 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (50,000x)
 1,550,000 ( 0.12%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() (50,000x)
 1,199,976 ( 0.10%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator++() (99,998x)
   799,984 ( 0.06%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const (99,998x)
   299,994 ( 0.02%)              int v = edge.v;
   299,994 ( 0.02%)              int weight = edge.weight;
         .           
         .                       // If v is not in MST and weight is smaller, update the key
 2,199,956 ( 0.18%)              if (!inMST[v] && weight < key[v]) {
22,799,544 ( 1.82%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (99,998x)
   599,988 ( 0.05%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (49,999x)
 1,399,972 ( 0.11%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (99,998x)
   849,983 ( 0.07%)                  pq.erase({key[v], v, u}); // Remove if already in the set
12,249,755 ( 0.98%)  => /usr/include/c++/11/tuple:std::tuple<int, int, int>::tuple<int&, int&, int&, true, true>(int&, int&, int&) (49,999x)
23,299,534 ( 1.86%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::erase(std::tuple<int, int, int> const&) (49,999x)
   599,988 ( 0.05%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (49,999x)
   399,992 ( 0.03%)                  key[v] = weight;
   599,988 ( 0.05%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (49,999x)
   849,983 ( 0.07%)                  pq.insert({key[v], v, u}); // Add updated key with new parent u
43,849,267 ( 3.49%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::insert(std::tuple<int, int, int>&&) (49,999x)
12,249,755 ( 0.98%)  => /usr/include/c++/11/tuple:std::tuple<int, int, int>::tuple<int&, int&, int&, true, true>(int&, int&, int&) (49,999x)
   599,988 ( 0.05%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (49,999x)
   449,991 ( 0.04%)                  parent[v] = u;
   599,988 ( 0.05%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (49,999x)
         .                       }
   150,000 ( 0.01%)          }
13,750,000 ( 1.09%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::~vector() (50,000x)
         .               }
         .           
         5 ( 0.00%)      return mstEdges;
       120 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector(std::vector<Edge, std::allocator<Edge> >&&) (1x)
        44 ( 0.00%)  }
       135 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::~vector() (1x)
       476 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (2x)
       389 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::~vector() (1x)
        90 ( 0.00%)  => /usr/include/c++/11/bits/stl_set.h:std::set<std::tuple<int, int, int>, std::less<std::tuple<int, int, int> >, std::allocator<std::tuple<int, int, int> > >::~set() (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/new
--------------------------------------------------------------------------------
Ir                  

-- line 167 ----------------------------------------
         .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
         .           void operator delete[](void*, std::size_t, std::align_val_t)
         .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
         .           #endif // __cpp_sized_deallocation
         .           #endif // __cpp_aligned_new
         .           
         .           // Default placement versions of operator new.
         .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
20,788,368 ( 1.66%)  { return __p; }
         .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         .           { return __p; }
         .           
         .           // Default placement versions of operator delete.
         .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
         .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
         .           //@}
         .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir                 

-- line 222 ----------------------------------------
        .              *
        .              *  This is the simple classic generic implementation.  It will work on
        .              *  temporary expressions, since they are only evaluated once, unlike a
        .              *  preprocessor macro.
        .             */
        .             template<typename _Tp>
        .               _GLIBCXX14_CONSTEXPR
        .               inline const _Tp&
1,001,655 ( 0.08%)      min(const _Tp& __a, const _Tp& __b)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
        .                 //return __b < __a ? __b : __a;
1,201,986 ( 0.10%)        if (__b < __a)
        .           	return __b;
  200,331 ( 0.02%)        return __a;
  400,662 ( 0.03%)      }
        .           
        .             /**
        .              *  @brief This does what you think it does.
        .              *  @ingroup sorting_algorithms
        .              *  @param  __a  A thing of arbitrary type.
        .              *  @param  __b  Another thing of arbitrary type.
        .              *  @return   The greater of the parameters.
        .              *
        .              *  This is the simple classic generic implementation.  It will work on
        .              *  temporary expressions, since they are only evaluated once, unlike a
        .              *  preprocessor macro.
        .             */
        .             template<typename _Tp>
        .               _GLIBCXX14_CONSTEXPR
        .               inline const _Tp&
  500,795 ( 0.04%)      max(const _Tp& __a, const _Tp& __b)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
        .                 //return  __a < __b ? __b : __a;
  600,954 ( 0.05%)        if (__a < __b)
  100,020 ( 0.01%)  	return __b;
   50,149 ( 0.00%)        return __a;
  200,318 ( 0.02%)      }
        .           
        .             /**
        .              *  @brief This does what you think it does.
        .              *  @ingroup sorting_algorithms
        .              *  @param  __a  A thing of arbitrary type.
        .              *  @param  __b  Another thing of arbitrary type.
        .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
        .              *  @return   The lesser of the parameters.
-- line 270 ----------------------------------------
-- line 305 ----------------------------------------
        .                 return __a;
        .               }
        .           
        .             // Fallback implementation of the function in bits/stl_iterator.h used to
        .             // remove the __normal_iterator wrapper. See copy, fill, ...
        .             template<typename _Iterator>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _Iterator
2,403,804 ( 0.19%)      __niter_base(_Iterator __it)
        .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
1,802,853 ( 0.14%)      { return __it; }
        .           
        .             template<typename _Ite, typename _Seq>
        .               _Ite
        .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
        .           		 std::random_access_iterator_tag>&);
        .           
        .             // Reverse the __niter_base transformation to get a
        .             // __normal_iterator back again (this assumes that __normal_iterator
-- line 323 ----------------------------------------
-- line 900 ----------------------------------------
        .           #else
        .           #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
        .           #endif
        .           
        .             template<typename _ForwardIterator, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline typename
        .               __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
       42 ( 0.00%)      __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
        .           	      const _Tp& __value)
        .               {
1,400,028 ( 0.11%)        for (; __first != __last; ++__first)
2,100,000 ( 0.17%)  	*__first = __value;
       28 ( 0.00%)      }
        .           
        .             template<typename _ForwardIterator, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline typename
        .               __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
       24 ( 0.00%)      __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
        .           	      const _Tp& __value)
        .               {
       12 ( 0.00%)        const _Tp __tmp = __value;
  800,012 ( 0.06%)        for (; __first != __last; ++__first)
  599,997 ( 0.05%)  	*__first = __tmp;
       16 ( 0.00%)      }
        .           
        .             // Specialization: for char types we can use memset.
        .             template<typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline typename
        .               __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
        .               __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
        .               {
-- line 933 ----------------------------------------
-- line 942 ----------------------------------------
        .           #endif
        .                 if (const size_t __len = __last - __first)
        .           	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
        .               }
        .           
        .             template<typename _Ite, typename _Cont, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
       56 ( 0.00%)      __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
        .           	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
        .           	      const _Tp& __value)
      112 ( 0.00%)      { std::__fill_a1(__first.base(), __last.base(), __value); }
3,500,098 ( 0.28%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__enable_if<!std::__is_scalar<Edge>::__value, void>::__type std::__fill_a1<Edge*, Edge>(Edge*, Edge*, Edge const&) (7x)
       98 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::base() const (14x)
        .           
        .             template<typename _Tp, typename _VTp>
        .               void
        .               __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
        .           	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
        .           	      const _VTp&);
        .           
        .             void
        .             __fill_a1(_GLIBCXX_STD_C::_Bit_iterator, _GLIBCXX_STD_C::_Bit_iterator,
        .           	    const bool&);
        .           
        .             template<typename _FIte, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
       77 ( 0.00%)      __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
       99 ( 0.00%)      { std::__fill_a1(__first, __last, __value); }
1,400,061 ( 0.11%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) (4x)
        .           
        .             template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
        .               void
        .               __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           	     const _Tp&);
        .           
        .             /**
-- line 977 ----------------------------------------
-- line 984 ----------------------------------------
        .              *
        .              *  This function fills a range with copies of the same value.  For char
        .              *  types filling contiguous areas of memory, this becomes an inline call
        .              *  to @c memset or @c wmemset.
        .             */
        .             template<typename _ForwardIterator, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
       49 ( 0.00%)      fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .           				  _ForwardIterator>)
        .                 __glibcxx_requires_valid_range(__first, __last);
        .           
       42 ( 0.00%)        std::__fill_a(__first, __last, __value);
3,500,476 ( 0.28%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::__fill_a<__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, Edge>(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >, Edge const&) (7x)
       21 ( 0.00%)      }
        .           
        .             // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
        .             inline _GLIBCXX_CONSTEXPR int
        .             __size_to_integer(int __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned
        .             __size_to_integer(unsigned __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR long
        .             __size_to_integer(long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned long
       28 ( 0.00%)    __size_to_integer(unsigned long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR long long
        .             __size_to_integer(long long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned long long
        .             __size_to_integer(unsigned long long __n) { return __n; }
        .           
        .           #if defined(__GLIBCXX_TYPE_INT_N_0)
        .             inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
        .             __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
-- line 1018 ----------------------------------------
-- line 1101 ----------------------------------------
        .                 static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
        .           #endif
        .                 return __fill_n_a1(__first, __n, __value);
        .               }
        .           
        .             template<typename _OutputIterator, typename _Size, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OutputIterator
       28 ( 0.00%)      __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        .           	       std::random_access_iterator_tag)
        .               {
        .           #if __cplusplus >= 201103L
        .                 static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
        .           #endif
        8 ( 0.00%)        if (__n <= 0)
        .           	return __first;
        .           
        .                 __glibcxx_requires_can_increment(__first, __n);
        .           
       36 ( 0.00%)        std::__fill_a(__first, __first + __n, __value);
1,400,125 ( 0.11%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::__fill_a<int*, int>(int*, int*, int const&) (4x)
       16 ( 0.00%)        return __first + __n;
        8 ( 0.00%)      }
        .           
        .             /**
        .              *  @brief Fills the range [first,first+n) with copies of value.
        .              *  @ingroup mutating_algorithms
        .              *  @param  __first  An output iterator.
        .              *  @param  __n      The count of copies to perform.
        .              *  @param  __value  A reference-to-const of arbitrary type.
        .              *  @return   The iterator at first+n.
-- line 1130 ----------------------------------------
-- line 1136 ----------------------------------------
        .              *  If @p __n is negative, the function does nothing.
        .             */
        .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .             // DR 865. More algorithms that throw away information
        .             // DR 426. search_n(), fill_n(), and generate_n() with negative n
        .             template<typename _OI, typename _Size, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
       28 ( 0.00%)      fill_n(_OI __first, _Size __n, const _Tp& __value)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
        .           
       36 ( 0.00%)        return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
1,400,221 ( 0.11%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&, std::random_access_iterator_tag) (4x)
       28 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:std::__size_to_integer(unsigned long) (4x)
       12 ( 0.00%)  			       std::__iterator_category(__first));
       24 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator_base_types.h:std::iterator_traits<int*>::iterator_category std::__iterator_category<int*>(int* const&) (4x)
        8 ( 0.00%)      }
        .           
        .             template<bool _BoolType>
        .               struct __equal
        .               {
        .                 template<typename _II1, typename _II2>
        .           	_GLIBCXX20_CONSTEXPR
        .           	static bool
        .           	equal(_II1 __first1, _II1 __last1, _II2 __first2)
-- line 1159 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 455 ----------------------------------------
         .                 /**
         .                  *  @brief  Allocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __n  The number of objects to allocate space for.
         .                  *
         .                  *  Calls @c a.allocate(n)
         .                 */
         .                 _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 1,201,038 ( 0.10%)        allocate(allocator_type& __a, size_type __n)
 1,601,384 ( 0.13%)        { return __a.allocate(__n); }
 4,650,288 ( 0.37%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::allocate(unsigned long, void const*) (50,000x)
         .           
         .                 /**
         .                  *  @brief  Allocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __n  The number of objects to allocate space for.
         .                  *  @param  __hint Aid to locality.
         .                  *  @return Memory of suitable size and alignment for @a n objects
         .                  *          of type @c value_type
-- line 472 ----------------------------------------
-- line 487 ----------------------------------------
         .                  *  @brief  Deallocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to the memory to deallocate.
         .                  *  @param  __n  The number of objects space was allocated for.
         .                  *
         .                  *  Calls <tt> a.deallocate(p, n) </tt>
         .                 */
         .                 static _GLIBCXX20_CONSTEXPR void
 1,401,211 ( 0.11%)        deallocate(allocator_type& __a, pointer __p, size_type __n)
 1,801,557 ( 0.14%)        { __a.deallocate(__p, __n); }
 5,900,000 ( 0.47%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::deallocate(std::_Rb_tree_node<std::tuple<int, int, int> >*, unsigned long) (50,000x)
         .           
         .                 /**
         .                  *  @brief  Construct an object of type `_Up`
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to memory of suitable size and alignment for
         .                  *	       an object of type `_Up`.
         .                  *  @param  __args Constructor arguments.
         .                  *
         .                  *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
         .                  *  in C++11, C++14 and C++17. Changed in C++20 to call
         .                  *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
         .                 */
         .                 template<typename _Up, typename... _Args>
         .           	static _GLIBCXX20_CONSTEXPR void
14,339,829 ( 1.14%)  	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
         .           		  _Args&&... __args)
         .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
         .           	{
         .           #if __cplusplus <= 201703L
18,436,923 ( 1.47%)  	  __a.construct(__p, std::forward<_Args>(__args)...);
 5,000,000 ( 0.40%)  => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::construct<std::tuple<int, int, int>, std::tuple<int, int, int> >(std::tuple<int, int, int>*, std::tuple<int, int, int>&&) (50,000x)
   350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::tuple<int, int, int>&& std::forward<std::tuple<int, int, int> >(std::remove_reference<std::tuple<int, int, int> >::type&) (50,000x)
         .           #else
         .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
         .           #endif
 6,145,641 ( 0.49%)  	}
         .           
         .                 /**
         .                  *  @brief  Destroy an object of type @a _Up
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to the object to destroy
         .                  *
         .                  *  Calls @c __a.destroy(__p).
         .                 */
         .                 template<typename _Up>
         .           	static _GLIBCXX20_CONSTEXPR void
 6,891,390 ( 0.55%)  	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
         .           	noexcept(is_nothrow_destructible<_Up>::value)
         .           	{
         .           #if __cplusplus <= 201703L
 5,742,825 ( 0.46%)  	  __a.destroy(__p);
   400,000 ( 0.03%)  => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::tuple<int, int, int> > >::destroy<std::tuple<int, int, int> >(std::tuple<int, int, int>*) (50,000x)
         .           #else
         .           	  std::destroy_at(__p);
         .           #endif
 3,445,695 ( 0.27%)  	}
         .           
         .                 /**
         .                  *  @brief  The maximum supported allocation size
         .                  *  @param  __a  An allocator.
         .                  *  @return @c __a.max_size()
         .                 */
         .                 static _GLIBCXX20_CONSTEXPR size_type
 1,001,655 ( 0.08%)        max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
         .                 {
         .           #if __cplusplus <= 201703L
   600,993 ( 0.05%)  	return __a.max_size();
        68 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::vector<Edge, std::allocator<Edge> > >::max_size() const (4x)
         .           #else
         .           	return size_t(-1) / sizeof(value_type);
         .           #endif
   400,662 ( 0.03%)        }
         .           
         .                 /**
         .                  *  @brief  Obtain an allocator to use when copying a container.
         .                  *  @param  __rhs  An allocator.
         .                  *  @return @c __rhs
         .                 */
         .                 static _GLIBCXX20_CONSTEXPR allocator_type
   300,000 ( 0.02%)        select_on_container_copy_construction(const allocator_type& __rhs)
   400,000 ( 0.03%)        { return __rhs; }
 1,100,000 ( 0.09%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<Edge>::allocator(std::allocator<Edge> const&) (50,000x)
         .               };
         .           
         .             /// Explicit specialization for std::allocator<void>.
         .             template<>
         .               struct allocator_traits<allocator<void>>
         .               {
         .                 /// The allocator type
         .                 using allocator_type = allocator<void>;
-- line 571 ----------------------------------------
-- line 837 ----------------------------------------
         .           #else
         .           	allocator_traits<_Allocator>::destroy(__alloc,
         .           					      std::__addressof(*__first));
         .           #endif
         .               }
         .           
         .             template<typename _ForwardIterator, typename _Tp>
         .               inline void
   700,161 ( 0.06%)      _Destroy(_ForwardIterator __first, _ForwardIterator __last,
         .           	     allocator<_Tp>&)
         .               {
   500,115 ( 0.04%)        _Destroy(__first, __last);
16,149,942 ( 1.29%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<std::vector<Edge, std::allocator<Edge> >*>(std::vector<Edge, std::allocator<Edge> >*, std::vector<Edge, std::allocator<Edge> >*) (1x)
   300,069 ( 0.02%)      }
         .           
         .           _GLIBCXX_END_NAMESPACE_VERSION
         .           } // namespace std
         .           #endif // _ALLOC_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir                  

-- line 71 ----------------------------------------
         .           
         .           #if __cplusplus >= 201103L
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 2103. propagate_on_container_move_assignment
         .                 typedef std::true_type propagate_on_container_move_assignment;
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
   350,196 ( 0.03%)        new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 _GLIBCXX20_CONSTEXPR
   800,216 ( 0.06%)        new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 template<typename _Tp1>
         .           	_GLIBCXX20_CONSTEXPR
         .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         .           
         .           #if __cplusplus <= 201703L
 1,050,385 ( 0.08%)        ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 pointer
         .                 address(reference __x) const _GLIBCXX_NOEXCEPT
         .                 { return std::__addressof(__x); }
         .           
         .                 const_pointer
         .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
         .                 { return std::__addressof(__x); }
         .           #endif
         .           
         .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
         .                 // about what the return value is when __n == 0.
         .                 _GLIBCXX_NODISCARD _Tp*
 1,401,211 ( 0.11%)        allocate(size_type __n, const void* = static_cast<const void*>(0))
         .                 {
         .           #if __cplusplus >= 201103L
         .           	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .           	 // 3308. std::allocator<void>().allocate(n)
         .           	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
         .           #endif
         .           
 2,001,730 ( 0.16%)  	if (__builtin_expect(__n > this->_M_max_size(), false))
 1,051,155 ( 0.08%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<Edge>::_M_max_size() const (150,165x)
         .           	  {
         .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .           	    // 3190. allocator::allocate sometimes returns too little storage
         .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
         .           	      std::__throw_bad_array_new_length();
         .           	    std::__throw_bad_alloc();
         .           	  }
         .           
         .           #if __cpp_aligned_new
         .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .           	  {
         .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
         .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         .           	  }
         .           #endif
 1,601,363 ( 0.13%)  	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
16,100,532 ( 1.28%)  => ???:0x000000000010b500 (150,165x)
   400,346 ( 0.03%)        }
         .           
         .                 // __p is not permitted to be a null pointer.
         .                 void
 1,401,211 ( 0.11%)        deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
         .                 {
         .           #if __cpp_aligned_new
         .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .           	  {
         .           	    ::operator delete(__p,
         .           # if __cpp_sized_deallocation
         .           			      __t * sizeof(_Tp),
         .           # endif
         .           			      std::align_val_t(alignof(_Tp)));
         .           	    return;
         .           	  }
         .           #endif
 2,001,702 ( 0.16%)  	::operator delete(__p
15,927,238 ( 1.27%)  => ???:0x000000000010b510 (150,165x)
         .           #if __cpp_sized_deallocation
         .           			  , __t * sizeof(_Tp)
         .           #endif
         .           			 );
   400,346 ( 0.03%)        }
         .           
         .           #if __cplusplus <= 201703L
         .                 size_type
 1,001,655 ( 0.08%)        max_size() const _GLIBCXX_USE_NOEXCEPT
 1,001,655 ( 0.08%)        { return _M_max_size(); }
        28 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::_M_max_size() const (4x)
         .           
         .           #if __cplusplus >= 201103L
         .                 template<typename _Up, typename... _Args>
         .           	void
16,388,376 ( 1.30%)  	construct(_Up* __p, _Args&&... __args)
         .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
32,726,752 ( 2.61%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 3,100,000 ( 0.25%)  => /usr/include/c++/11/tuple:std::tuple<int, int, int>::tuple(std::tuple<int, int, int>&&) (50,000x)
   400,000 ( 0.03%)  => /usr/include/c++/11/new:operator new(unsigned long, void*) (50,000x)
   350,000 ( 0.03%)  => /usr/include/c++/11/bits/move.h:std::tuple<int, int, int>&& std::forward<std::tuple<int, int, int> >(std::remove_reference<std::tuple<int, int, int> >::type&) (50,000x)
         .           
         .                 template<typename _Up>
         .           	void
 5,742,825 ( 0.46%)  	destroy(_Up* __p)
         .           	noexcept(std::is_nothrow_destructible<_Up>::value)
 3,445,695 ( 0.27%)  	{ __p->~_Up(); }
         .           #else
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 402. wrong new expression in [some_] allocator::construct
         .                 void
         .                 construct(pointer __p, const _Tp& __val)
         .                 { ::new((void *)__p) _Tp(__val); }
         .           
         .                 void
-- line 176 ----------------------------------------
-- line 189 ----------------------------------------
         .           	friend _GLIBCXX20_CONSTEXPR bool
         .           	operator!=(const new_allocator&, const new_allocator<_Up>&)
         .           	_GLIBCXX_NOTHROW
         .           	{ return false; }
         .           #endif
         .           
         .               private:
         .                 _GLIBCXX_CONSTEXPR size_type
 1,602,016 ( 0.13%)        _M_max_size() const _GLIBCXX_USE_NOEXCEPT
         .                 {
         .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
   400,504 ( 0.03%)  	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
         .           #else
         .           	return std::size_t(-1) / sizeof(_Tp);
         .           #endif
   801,008 ( 0.06%)        }
         .               };
         .           
         .           _GLIBCXX_END_NAMESPACE_VERSION
         .           } // namespace
         .           
         .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: Graph.cpp
--------------------------------------------------------------------------------
Ir                  

         .           #include <iostream>
         .           #include "Graph.hpp"
         .           #include <stack>
         .           
        11 ( 0.00%)  Graph::Graph(int num_vertices) {
        67 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::vector() (1x)
         3 ( 0.00%)      this->num_vertices = num_vertices;
         7 ( 0.00%)      adj.resize(num_vertices);
 5,401,224 ( 0.43%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::resize(unsigned long) (1x)
         .           
         .               #ifdef DEBUG
         .                   std::cout << "Graph initialized with " << num_vertices << " vertices" << std::endl;
         .               #endif
         4 ( 0.00%)  }
         .           
         5 ( 0.00%)  Graph::~Graph() {
         .               // didn't allocate any memory, so nothing to delete, will just clear the vector
         .               // adj.clear();
         7 ( 0.00%)  }
16,150,165 ( 1.29%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::~vector() (1x)
         .           
         .           void Graph::resetGraph(int num_vertices) {
         .               this->num_vertices = num_vertices;
         .               adj.clear();
         .               adj.resize(num_vertices);
         .           }
         .           
   599,988 ( 0.05%)  void Graph::addEdge(int u, int v, int weight) {
   799,984 ( 0.06%)      if (u < 0 || u >= num_vertices || v < 0 || v >= num_vertices) {
         .                   return;
         .               }
    49,999 ( 0.00%)      bool found = false;
 1,899,948 ( 0.15%)      for (const Edge& edge : adj[u]) {
 3,399,898 ( 0.27%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) (99,997x)
 1,599,968 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (49,999x)
 1,549,969 ( 0.12%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() (49,999x)
   749,985 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) (49,999x)
   599,976 ( 0.05%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator++() (49,998x)
   399,984 ( 0.03%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const (49,998x)
   349,986 ( 0.03%)          if (edge == v) {
   999,960 ( 0.08%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.hpp:Edge::operator==(int const&) const (49,998x)
         .                       found = true;
         .                   }
         .               }
   199,996 ( 0.02%)      if (!found) {
   899,982 ( 0.07%)          adj[u].push_back(Edge(u, v, weight));
79,351,450 ( 6.32%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::push_back(Edge&&) (49,999x)
   749,985 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) (49,999x)
   949,981 ( 0.08%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.hpp:Edge::Edge(int, int, int) (49,999x)
         .               }
    49,999 ( 0.00%)      found = false;
 1,199,976 ( 0.10%)      for (const Edge& edge : adj[v]) {
 1,699,966 ( 0.14%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) (49,999x)
 1,599,968 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (49,999x)
 1,549,969 ( 0.12%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() (49,999x)
   749,985 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) (49,999x)
         .                   if (edge == u) {
         .                       found = true;
         .                   }
         .               }
   199,996 ( 0.02%)      if (!found) {
   949,981 ( 0.08%)          adj[v].push_back(Edge(v, u, weight));
57,199,000 ( 4.55%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::push_back(Edge&&) (49,999x)
   749,985 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) (49,999x)
   949,981 ( 0.08%)  => /home/samurai/cs/Operating-Systems/Operating-Systems-Final-Project/Graph.hpp:Edge::Edge(int, int, int) (49,999x)
         .               }
   299,994 ( 0.02%)  }
         .           
         .           void Graph::removeEdge(int u, int v) {
         .               auto it_u = std::remove_if(adj[u].begin(), adj[u].end(), [v](const Edge& edge) {
         .                   return edge == v;
         .               });
         .               if (it_u != adj[u].end()) {
         .                   adj[u].erase(it_u, adj[u].end());
         .               }
-- line 55 ----------------------------------------
-- line 57 ----------------------------------------
         .               auto it_v = std::remove_if(adj[v].begin(), adj[v].end(), [u](const Edge& edge) {
         .                   return edge == u;
         .               });
         .               if (it_v != adj[v].end()) {
         .                   adj[v].erase(it_v, adj[v].end());
         .               }
         .           }
         .           
        70 ( 0.00%)  std::vector<Edge> Graph::getEdges() const {
        21 ( 0.00%)      std::vector<Edge> edges;
       469 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector() (7x)
 1,750,042 ( 0.14%)      for (int i = 0; i < num_vertices; ++i) {
20,299,762 ( 1.62%)          for (Edge edge : adj[i]) {
35,699,524 ( 2.84%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge const*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > > const&) (1,049,986x)
11,200,000 ( 0.89%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() const (350,000x)
10,850,000 ( 0.86%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() const (350,000x)
 8,399,832 ( 0.67%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator++() (699,986x)
 5,599,888 ( 0.45%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge const*, std::vector<Edge, std::allocator<Edge> > >::operator*() const (699,986x)
 5,250,000 ( 0.42%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) const (350,000x)
 3,499,930 ( 0.28%)              edges.push_back(edge);
212,065,112 (16.89%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::push_back(Edge const&) (699,986x)
         .                   }
         .               }
         7 ( 0.00%)      return edges;
        49 ( 0.00%)  }
         .           
   599,988 ( 0.05%)  Edge& Graph::getEdge(int u, int v) {
 1,399,972 ( 0.11%)      for (Edge& edge : adj[u]) {
 1,699,966 ( 0.14%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) (49,999x)
 1,599,968 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (49,999x)
 1,549,969 ( 0.12%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() (49,999x)
   749,985 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) (49,999x)
   399,992 ( 0.03%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const (49,999x)
   199,996 ( 0.02%)          if (edge.v == v) {
    49,999 ( 0.00%)              return edge;
         .                   }
         .               }
         .               throw std::out_of_range("Edge does not exist");
   399,992 ( 0.03%)  }
         .           
   350,000 ( 0.03%)  std::vector<Edge> Graph::getNeighbors(int u) const {
   600,000 ( 0.05%)      return adj[u];
39,250,048 ( 3.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::vector(std::vector<Edge, std::allocator<Edge> > const&) (50,000x)
   750,000 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) const (50,000x)
   150,000 ( 0.01%)  }
         .           
        18 ( 0.00%)  bool Graph::isConnected() {
         .               // use simple dfs, this is an undirected graph
        30 ( 0.00%)      std::vector<bool> visited(num_vertices, false);
    14,214 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::vector(unsigned long, bool const&, std::allocator<bool> const&) (2x)
        36 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<bool>::~allocator() (2x)
        36 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<bool>::allocator() (2x)
        10 ( 0.00%)      DFS(0, visited);
106,998,686 ( 8.52%)  => Graph.cpp:Graph::DFS(int, std::vector<bool, std::allocator<bool> >&) (2x)
         .           
 1,900,040 ( 0.15%)      for (bool v : visited) {
 4,100,000 ( 0.33%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator*() const (100,000x)
 2,800,262 ( 0.22%)  => /usr/include/c++/11/bits/stl_bvector.h:std::operator!=(std::_Bit_iterator_base const&, std::_Bit_iterator_base const&) (100,002x)
 2,710,934 ( 0.22%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator++() (100,000x)
 1,400,000 ( 0.11%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (100,000x)
       114 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() (2x)
        26 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::end() (2x)
   400,000 ( 0.03%)          if (!v) {
         .                       return false;
         .                   }
         .               }
         .           
         2 ( 0.00%)      return true;
        20 ( 0.00%)  }
       768 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::~vector() (2x)
         .           
         .           // DFS function for a graph
 1,000,000 ( 0.08%)  void Graph::DFS(int v, std::vector<bool>& visited) {
 1,200,000 ( 0.10%)      visited[v] = true;
       456 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (2x)
        42 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) (2x)
         .           
         .               // Visit all neighbors of v
 5,199,944 ( 0.41%)      for (const Edge& edge : adj[v]) {
       136 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Edge*, std::vector<Edge, std::allocator<Edge> > >(__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&, __gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > > const&) (4x)
        64 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::end() (2x)
        62 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<Edge, std::allocator<Edge> >::begin() (2x)
        30 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<Edge, std::allocator<Edge> >, std::allocator<std::vector<Edge, std::allocator<Edge> > > >::operator[](unsigned long) (2x)
        24 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator++() (2x)
        16 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Edge*, std::vector<Edge, std::allocator<Edge> > >::operator*() const (2x)
 2,999,940 ( 0.24%)          if (!visited[edge.v]) {
       456 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (2x)
        28 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (2x)
   699,986 ( 0.06%)              DFS(edge.v, visited);
106,997,196 ( 8.52%)  => Graph.cpp:Graph::DFS(int, std::vector<bool, std::allocator<bool> >&)'2 (2x)
         .                   }
         .               }
   600,000 ( 0.05%)  }
         .           
         8 ( 0.00%)  int Graph::getNumVertices() const {
         4 ( 0.00%)      return num_vertices;
        25 ( 0.00%)  }       127 ( 0.00%)  => Graph.cpp:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/./elf/dl-lookup.c
  ./malloc/./malloc/arena.c
  ./malloc/./malloc/malloc.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,206,165,917 (96.04%)  events annotated

